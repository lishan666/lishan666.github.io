<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Python一键提取视频中的帧图片</title>
    <link href="/2025/03/26/python-extracts-images/"/>
    <url>/2025/03/26/python-extracts-images/</url>
    
    <content type="html"><![CDATA[<p>为了从视频中提取每一帧图片，编写Python脚本实现该功能，脚本中的关键参数根据实际情况进行修改</p><ul><li><p>video_path为指定的视频路径</p></li><li><p>interval为指定分割视频是是否跳帧，默认不跳帧，即全部分割</p></li><li><p>width, height 为指定对分割帧图片调整大小，默认不调整</p></li></ul><h2 id="分割单视频文件"><a href="#分割单视频文件" class="headerlink" title="分割单视频文件"></a>分割单视频文件</h2><p>该脚本自动对帧图片编号，设置为7位编码，最多可分割9999999帧图片，即92小时的30FPS视频</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># ============================================================</span><br><span class="hljs-comment"># @Date    : 2021/12/08 14:40:31</span><br><span class="hljs-comment"># @Author  : LiShan</span><br><span class="hljs-comment"># @Email   : lishan@st.xatu.edu.com</span><br><span class="hljs-comment"># @File    : extract.py</span><br><span class="hljs-comment"># @IDE     : PyCharm</span><br><span class="hljs-comment"># @Func    : Extract video image</span><br><span class="hljs-comment"># ============================================================</span><br><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><br>video_path = <span class="hljs-string">&quot;./assets/intersection.mp4&quot;</span><br>save_path = video_path[:video_path.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)]<br>os.makedirs(save_path, exist_ok=<span class="hljs-literal">True</span>)<br>cap = cv2.VideoCapture(video_path)<br>fps = <span class="hljs-built_in">int</span>(cap.get(cv2.CAP_PROP_FPS))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FPS:&#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(fps)<br>rate = cap.get(<span class="hljs-number">5</span>)<br>frame_num = cap.get(<span class="hljs-number">7</span>)<br>duration = frame_num/rate<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;video total time:&#123;:.2f&#125;s&#x27;</span>.<span class="hljs-built_in">format</span>(duration))<br><br><span class="hljs-comment"># width, height = 1920, 1080</span><br><span class="hljs-comment"># interval = int(fps) * 4</span><br>interval = <span class="hljs-number">1</span><br>process_num = frame_num // interval<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;process frame:&#123;:.0f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(process_num))<br><br>cnt = <span class="hljs-number">0</span><br>num = <span class="hljs-number">0</span><br><br>t0 = time.time()<br><span class="hljs-keyword">while</span> cap.isOpened():<br>    ret, frame = cap.read()<br>    <span class="hljs-keyword">if</span> ret:<br>        cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> cnt % interval == <span class="hljs-number">0</span>:<br>            num += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># frame = cv.resize(frame, (width, height))</span><br>            cv2.imwrite(save_path + <span class="hljs-string">&quot;/%07d.jpg&quot;</span> % num, frame)<br>            remain_frame = process_num - num<br>            t1 = time.time() - t0<br>            t0 = time.time()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Processing %07d.jpg, remain frame: %d, remain time: %.2fs&quot;</span> % (num, remain_frame, remain_frame * t1))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> cv2.waitKey(<span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xff</span> == <span class="hljs-number">27</span>:<br>        <span class="hljs-keyword">break</span><br><br>cap.release()<br>cv2.destroyAllWindows()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;done&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>分隔效果如下：</p><img src="/2025/03/26/python-extracts-images/d3a9b2e3a55bc00bbc39ca1b38896588.png" class="" title="img"><h2 id="分割多视频文件"><a href="#分割多视频文件" class="headerlink" title="分割多视频文件"></a>分割多视频文件</h2><p>增加多对个视频文件提取制作数据集的功能</p><p> 1<a href="https://10.98.69.174:4443shell">https://10.98.69.174:4443shell</a></p><img src="/2025/03/26/python-extracts-images/1263acf7760b895dc5ad965e809a0661.png" class="" title="img"><p>文件夹内的视频文件如下</p><img src="/2025/03/26/python-extracts-images/d9b9d8b1f0f94e0dbf5bf6cc140d3b8e.png" class="" title="img"><p>运行下列脚本文件，分割后的图片将保存到JPEGImage文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># ============================================================</span><br><span class="hljs-comment"># @Date    : 2021/12/08 14:40:31</span><br><span class="hljs-comment"># @Author  : LiShan</span><br><span class="hljs-comment"># @Email   : lishan@st.xatu.edu.com</span><br><span class="hljs-comment"># @File    : extract.py</span><br><span class="hljs-comment"># @IDE     : PyCharm</span><br><span class="hljs-comment"># @Func    : Extract video image</span><br><span class="hljs-comment"># ============================================================</span><br><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_video_list</span>(<span class="hljs-params">path</span>):<br>    video_ext = [<span class="hljs-string">&quot;.mp4&quot;</span>, <span class="hljs-string">&quot;.avi&quot;</span>]<br>    video_names = []<br>    <span class="hljs-keyword">for</span> maindir, subdir, file_name_list <span class="hljs-keyword">in</span> os.walk(path):<br>        <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> file_name_list:<br>            apath = os.path.join(maindir, filename)<br>            ext = os.path.splitext(apath)[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> ext <span class="hljs-keyword">in</span> video_ext:<br>                video_names.append(apath)<br>    <span class="hljs-keyword">return</span> video_names<br><br><br>video_path = <span class="hljs-string">&quot;./video/&quot;</span><br>save_path = <span class="hljs-string">&quot;./JPEGImages/&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;frame image save path：&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(save_path))<br>os.makedirs(save_path, exist_ok=<span class="hljs-literal">True</span>)<br><br>num = <span class="hljs-number">0</span><br>video_cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> os.path.isdir(video_path):<br>    files = get_video_list(video_path)<br><span class="hljs-keyword">else</span>:<br>    files = [video_path]<br>files.sort()<br>video_num = <span class="hljs-built_in">len</span>(files)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(video_num):<br>    video_name = files[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;video name: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(video_name))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;progress: &#123;:.0f&#125;/&#123;:.0f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>, video_num))<br>    cap = cv2.VideoCapture(video_name)<br>    fps = <span class="hljs-built_in">int</span>(cap.get(cv2.CAP_PROP_FPS))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;FPS: &#123;:.2f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(fps))<br>    rate = cap.get(<span class="hljs-number">5</span>)<br>    frame_num = cap.get(<span class="hljs-number">7</span>)<br>    duration = frame_num/rate<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;video total time: &#123;:.2f&#125;s&#x27;</span>.<span class="hljs-built_in">format</span>(duration))<br><br>    <span class="hljs-comment"># width, height = 1920, 1080</span><br>    <span class="hljs-comment"># interval = 1</span><br>    interval = <span class="hljs-built_in">int</span>(fps) * <span class="hljs-number">4</span><br>    process_num = frame_num // interval<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;process frame: &#123;:.0f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(process_num))<br>    cnt = <span class="hljs-number">0</span><br>    current_num = <span class="hljs-number">0</span><br>    t0 = time.time()<br>    <span class="hljs-keyword">while</span> cap.isOpened():<br>        ret, frame = cap.read()<br>        <span class="hljs-keyword">if</span> ret:<br>            cnt += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> cnt % interval == <span class="hljs-number">0</span>:<br>                num += <span class="hljs-number">1</span><br>                current_num += <span class="hljs-number">1</span><br>                <span class="hljs-comment"># frame = cv.resize(frame, (width, height))</span><br>                cv2.imwrite(save_path + <span class="hljs-string">&quot;/%07d.jpg&quot;</span> % num, frame)<br>                remain_frame = process_num - current_num<br>                t1 = time.time() - t0<br>                t0 = time.time()<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Processing %07d.jpg, remain frame: %d, remain time: %.2fs&quot;</span> %<br>                      (num, remain_frame, remain_frame * t1))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br>    cap.release()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;done&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>分割结果如下：</p><img src="/2025/03/26/python-extracts-images/2a62a390022785c1b9a2132f3f27bd24.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>脚本程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个可复用的STM32串口通信项目</title>
    <link href="/2025/03/25/stm32-serial-communication/"/>
    <url>/2025/03/25/stm32-serial-communication/</url>
    
    <content type="html"><![CDATA[<p>Gitee 项目资料  <a href="https://gitee.com/lishan666/Usart">https://gitee.com/lishan666/Usart</a></p><h2 id="1-项目简介"><a href="#1-项目简介" class="headerlink" title="1 项目简介"></a>1 项目简介</h2><p>超市的收银台一般都会放置一台小型打印机，其任务是将顾客的消费金额等信息打印在一张小票上，那么打印机又是如何知道自己该打印那些内容呢？</p><p>本文以经典的RS232串口通信来模拟收银台电脑与打印机之间的通信工作流程，系统模拟说明如下。</p><ol><li>用笔记本电脑模拟收银台电脑，安装串口通信助手软件作为上位机界面；</li><li>用STM32F103C8T6单片机模拟打印机控制器；</li><li>用PL2303HX模块模拟USB到TTL电平的转换；</li><li>在串口通信助手发送区输入打印指令模拟结算操作；</li><li>在串口通信助手接收区显示打印结果模拟打印小票。</li></ol><p>本文对超市微型打印机的通信部分进行研究设计，系统设计目标是：</p><ol><li><p>搭建电脑到打印机之间的RS232串口通信电路；</p></li><li><p>设计串口通信程序，程序运行在打印机控制器STM32F103C8T6中；</p></li><li><p>通过串口调试助手对通信效果进行演示。</p></li></ol><p>需要说明的是，超市收银台电脑与打印机之间的通信方式不止RS232串口一种，常见的还有USB通信、LPT并口通信、WiFi通信等方式。它们本质上都是一种数据传输手段，只不过其工作方式、成本、实现复杂度等有所区别。</p><h2 id="2-设计要求"><a href="#2-设计要求" class="headerlink" title="2 设计要求"></a>2 设计要求</h2><p><strong>基础部分</strong></p><p>串口通信的具体设计要求如下：</p><p>（1）波特率4800bps，一位起始位，八位有效数据位，一位奇偶校验位；</p><p>（2）使用串口调试助手发送一个数据打印命令“@PrintData12345678900#”；</p><p>（3）单片机收到命令后，解析命令，输出数据“1234567890”，然后给上位机发送“数据已成功打印”。</p><p><strong>扩展部分</strong></p><p>为了加深对串口通信知识的理解和运用，本文提出以下扩展要求并进行实现：</p><p>（1）每次输出打印信息及提示信息结束后都进行换行显示；</p><p>（2）系统上电工作时，通过串口通信助手显示系统正常工作的提示信息；</p><p>（3）当打印指令错误时，输出“instruction error”进行提示；</p><p>（4）当接收的字符数大于设定的缓冲区大小时，输出“Overflow error”；</p><p>（5）当出现校验错误时，输出“校验错误，请重新发送命令”。</p><h2 id="3-总体设计方案"><a href="#3-总体设计方案" class="headerlink" title="3 总体设计方案"></a>3 总体设计方案</h2><p>使用笔记本电脑与STM32单片机进行数据交互，模拟超市电脑与打印机之间的通信过程。笔记本电脑上安装有串口调试助手软件，串口调试助手作为上位机可以实现人机界面交互的功能，同时也是检验串口通信是否正常的工具。</p><p>笔记本电脑一般没有串口，但至少有一个USB口。单片机的串口是映射到GPIO上的，本文只需要用到接收、发送引脚，也就是2个GPIO，再加上电源和地，一共4个单片机引脚。笔记本的USB口和单片机串口之间不能直接相连，因为两者的工作电平逻辑不一致，需要通过一个USB转TTL模块进行电平转换，同时笔记本电脑上需要安装配套的USB转串口驱动程序。</p><p>系统设计方案如下</p><img src="/2025/03/25/stm32-serial-communication/7d66868b08c0df9f631f1e62cdecc277.png" class="" title="img"><h2 id="4-设计前的思考和准备"><a href="#4-设计前的思考和准备" class="headerlink" title="4 设计前的思考和准备"></a>4 设计前的思考和准备</h2><p><strong>思考：</strong></p><ol><li>串口的参数设置中有一位校验位，如何实现，又如何体现校验的作用；</li><li>如何判断串口数据传输的开始、结束；</li><li>如何判断命令是否符合要求，并取出中间的数据部分；</li><li>能否直接输出中文。</li></ol><p><strong>准备：</strong></p><ol><li>搭建硬件电路连线</li></ol><p>​    在开发过程中，本文还连接了ST-Link调试器，使用调试器可以让程序下载更快，同时能进行硬件仿真调试，可以提高开发效率，当然也可以直接使用串口下载程序。项目完成后，实际运行时不需要再连接调试器。</p><p>硬件连接示意如下</p><img src="/2025/03/25/stm32-serial-communication/1abbda00a03293495b37648410c57113.png" class="" title="img"><p>2.安装USB转串口驱动程序</p><p>本文用到的USB转TTL模块芯片为PL2303HX，驱动程序可在网上进行下载，双击驱动程序按提示完成驱动安装。其他芯片的驱动安装方法类似。</p><p>安装USB转串口驱动如下</p><img src="/2025/03/25/stm32-serial-communication/2b62c0194d88fe177f8fb17f56f04952.png" class="" title="img"><p>驱动安装完成后，插上USB转TTL模块，在设备管理器中选择端口，如果能够看到识别到的驱动程序和端口号，表示驱动安装成功。否则，右键选择更新驱动程序，从我的计算机驱动程序中选择2009年的版本，当出现下图界面，能分配到一个端口号即表示安装成功。其它的芯片模块可能在驱动程序安装完后就能看到端口号，此时不需要进行驱动程序的更新操作。</p><p>驱动安装成功示意图如下</p><img src="/2025/03/25/stm32-serial-communication/f9d7f238fbb78e7704d92edff281e65e.png" class="" title="img"><p>3.下载串口调试助手软件、Keil-MDk软件</p><p>串口调试助手网上非常多，可以自行选择，但是要注意，一定要知道这款串口助手对中文字符的编码采用什么格式，网上资源以GB2313居多，也有部分是采用UTF-8格式的，本文选择GB2313编码方式的串口调试助手。</p><p>Keil-MDK软件是开发嵌入式的IDE，可从网上下载，建议下载5.28版本，破解操作也可从网上参考，本文不赘述。Keil-MDK编程的编码格式设置一定要与串口调试助手一致，这样才不会出现中文乱码的问题，建议选择GB2313。</p><p>MDK-keil编码设置如下</p><img src="/2025/03/25/stm32-serial-communication/3704b608a5d8ba50ed8602d823dfd7c6.png" class="" title="img"><p>4.准备一份STM32中文参考手册，便于开发过程中查询串口的使用方法以及相关寄存器的设置。</p><p>5.准备一份STM32固件库手册，便于开发程序时查询标准固件库函数使用方法，加快开发效率。</p><p>6.找到一份STM32工程模板文件，可以直接从固件库文件中复制，也可以自己创建，省去工程的创建、文件的添加等机械工作。</p><p>准备资料如下</p><img src="/2025/03/25/stm32-serial-communication/69af05a070a2137522b182ed890610e7.png" class="" title="img"><h2 id="5-本文设计的关键点"><a href="#5-本文设计的关键点" class="headerlink" title="5 本文设计的关键点"></a>5 本文设计的关键点</h2><h3 id="5-1-校验位设置"><a href="#5-1-校验位设置" class="headerlink" title="5.1 校验位设置"></a>5.1 校验位设置</h3><p>通过查阅STM32中文手册发现，USART_CR1寄存器中的PCE位可以使能奇偶校验位的产生，M位可以设置数据字的长度，如下图所示：</p><p>USART_CR1寄存器PCE位-决定是否产生校验位</p><img src="/2025/03/25/stm32-serial-communication/b1f7f3649904c65bc156fecdfbe5865a.png" class="" title="img"><p>USART_CR1寄存器M位-决定数据字长度</p><img src="/2025/03/25/stm32-serial-communication/d2da54407cf675ffc95b547c3395786d.png" class="" title="img"><p>​    M位和PCE位的值两者共同决定USART帧的格式，一共四种，如下图所示。根据设计要求，本文设置为M位为1，PCE位为1，即字长为9，校验位选择奇校验（也可选择偶校验）。</p><img src="/2025/03/25/stm32-serial-communication/69c6c6a4d00dbf239aaa727533135544.png" class="" title="img"><p>​    通过查阅STM32固件库手册，复制串口参数设置代码示例，并进行修改，下面展示关键部分的参数设置。</p><p>串口初始化参数设置如下</p><img src="/2025/03/25/stm32-serial-communication/a6601aa53894f9cdd7f82f873732b9bb.png" class="" title="img"><h3 id="5-2-串口中断设置"><a href="#5-2-串口中断设置" class="headerlink" title="5.2 串口中断设置"></a>5.2 串口中断设置</h3><p>串口通信的数据接收、发送程序一般有中断和查询（也叫轮询）两种方式，相对来说，中断方式对CUP的资源占用较少，响应也更及时，本文使用中断方式接收来自上位机电脑的数据。</p><p>翻阅STM32中文手册发现，STM32单片机的串口中断请求事件有以下几种，当表中事件发生时，只要设置了相应的中断使能，都会通过嵌套中断向量（NVIC）的向量表进入到串口中断服务程序中，可以在服务程序中查询相应事件的标志位判断当前是那一种事件发生。为了检测数据的接收、接收完成、奇偶校验出错这三种情况，本文设置的三个串口中断事件，下图中用红框标注。</p><p>①接收数据就绪可读表示对方已经发送了一个字节数据，这个数据现在在硬件接收缓冲区中，并且现在可以读出数据。当第一次发生此事件时代表数据传输的开始。</p><p>②检测到空闲线路表示在对方传输上一字节数据后，又过了一个字节的传输时长，单片机仍然没有接收到数据，可以代表数据发送的结束，也就是完成了一次数据的传输。</p><p>③奇偶校验错表示按照约定的校验规则，当前字节的数据发生了错误。</p><p>STM32串口中断事件 如下（注：表中的TXNE标志应为RXNE）</p><img src="/2025/03/25/stm32-serial-communication/8e20f88b18a45a162a5edb45b96cb22e.png" class="" title="img"><p>根据固件库手册和库函数注释，使能上述三个串口中断事件的代码如下：</p><img src="/2025/03/25/stm32-serial-communication/fef28821b63ca9b0e3438be0f136d77c.png" class="" title="img"><h3 id="5-3-串口中断服务程序"><a href="#5-3-串口中断服务程序" class="headerlink" title="5.3 串口中断服务程序"></a>5.3 串口中断服务程序</h3><p>根据STM32中文手册，串口中断事件相应的标志位在状态寄存器SR中，在串口中断服务程序中查询这几个标志位的值就可知道发生了什么事件。SR寄存器中的三个标志位介绍如下所示：</p><img src="/2025/03/25/stm32-serial-communication/13019c8d189c144e0d1560f4b60b55cd.png" class="" title="img"><img src="/2025/03/25/stm32-serial-communication/f9f18e32b7e36847b802cf50fd9cfff3.png" class="" title="img"><img src="/2025/03/25/stm32-serial-communication/e6d6632b3b5138596d2d9cd05337789a.png" class="" title="img"><p>从上表看出，标志位置1时，表示该事件发送，此时单片机可以进行相应操作。但要注意，一定要及时清除标志位（清0操作），否则程序会一直进入中断服务程序。对于RXNE位，当读出DR寄存器中的数据后，硬件自动清0，不用再单独写清0的代码。对于PE位和IDLE为，需由软件进行清0，清0操作为先读SR寄存器，再读DR寄存器。串口1软件清除PE、IDLE标志位代码为：</p><p>USART1-&gt;SR;  &#x2F;&#x2F;先读状态寄存器</p><p>USART1-&gt;DR;  &#x2F;&#x2F;再读数据寄存器</p><p>串口1的中断服务程序名为void USART1_IRQHandler(void)，位于stm32f10x_it.c文件中，当然，也可以写在其他位置，但程序名不要改变，同时要处理好各c文件之间依赖关系。</p><p>串口中断服务程序如下</p><img src="/2025/03/25/stm32-serial-communication/b4ba8a4aa42d6fdcff91482c28afa69b.png" class="" title="img"><h2 id="6-程序设计"><a href="#6-程序设计" class="headerlink" title="6 程序设计"></a>6 程序设计</h2><p>在本文的程序设计中，要注意以下几个要点。</p><ol><li>有奇偶校验位时，串口初始化程序中的字长设置为9，串口调试助手中的数据位选择8；</li><li>注意各种标志位的设置与清除，串口发送完数据后一定要等TXE置位后再发送下一位数据；</li><li>主函数、中断请求函数中不宜写太多代码；</li><li>可以考虑在解析数据前关闭中断，串口输出数据后再打开中断。</li></ol><p>整个程序有四个关键部分，分别是主函数、串口中断处理、数据解析、串口输出，下面分别对它们的流程做简单介绍。串口输出和数据解析函数放在附录中。</p><h3 id="6-1-主函数"><a href="#6-1-主函数" class="headerlink" title="6.1 主函数"></a>6.1 主函数</h3><p>主函数流程如下</p><img src="/2025/03/25/stm32-serial-communication/b0a272312bcbf2e8365d85b94a243ef4.png" class="" title="img"><p>主函数程序如下</p><img src="/2025/03/25/stm32-serial-communication/efab04c1cb52eeea37d39600cfbd105a.png" class="" title="img"><h3 id="6-2-串口中断处理函数"><a href="#6-2-串口中断处理函数" class="headerlink" title="6.2 串口中断处理函数"></a>6.2 串口中断处理函数</h3><p>串口中断处理函数流程如下</p><img src="/2025/03/25/stm32-serial-communication/ddaa23501921b551ca633332f34a3a21.png" class="" title="img"><p>接收中断回调函数如下</p><img src="/2025/03/25/stm32-serial-communication/fd5f09bf7492f90a841606c944feb6a0.png" class="" title="img"><p>空闲中断回调函数如下</p><img src="/2025/03/25/stm32-serial-communication/a7db4fcf205cb5af55bf3f006dbfc2f2.png" class="" title="img"><p>校验出错中断回调函数如下</p><img src="/2025/03/25/stm32-serial-communication/bb84304a4cb9cfe534be9dec2b7562dd.png" class="" title="img"><h3 id="6-3-数据解析函数"><a href="#6-3-数据解析函数" class="headerlink" title="6.3 数据解析函数"></a>6.3 数据解析函数</h3><p>数据解析函数流程如下</p><img src="/2025/03/25/stm32-serial-communication/463d7d93c2adf82abd46eb80ab62f033.png" class="" title="img"><h3 id="6-4-串口输出函数"><a href="#6-4-串口输出函数" class="headerlink" title="6.4 串口输出函数"></a>6.4 串口输出函数</h3><p>串口输出流程如下</p><img src="/2025/03/25/stm32-serial-communication/aeae0a15430f7411c17ed80859860754.png" class="" title="img"><h2 id="7-结果演示"><a href="#7-结果演示" class="headerlink" title="7 结果演示"></a>7 结果演示</h2><p>打开串口调试助手，设置好串口参数，按各种情况进行测试，演示效果如下</p><img src="/2025/03/25/stm32-serial-communication/32c0d42ebdf1a3f646fa8655c1154f7d.png" class="" title="img"><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p><strong>问题1</strong>：开始和结束错误标志都设置为2会不会分不清？</p><p>答：因为指令的开始和结束部分出现错误时都表示这是一个错误的指令，所以程序中将其错误类型都设置为2，这样做确实是无法分清到底是指令的开始部分发生了错误还是结束部分发送错误。如果确实有必要将这两种错误分开，可以考虑在程序中将这两种情况设置不同的错误标志号。</p><p><strong>问题2</strong>：为啥选奇校验和偶校验哪个都对？</p><p>答：尚不清楚您说的对是什么意思，但是不管在串口助手中选哪一种校验方式，发送指令后单片机都会返回一段信息，可能是成功打印的信息，也可能是错误的提示信息。在演示中出现了一个细节可能与您的提问相关，因为当时发送的是一个错误的指令，所以不管选择奇校验还是偶校验方式，单片机返回的信息都是“instruction error”，这是由于程序中必须对数据进行解析，当解析结果为指令错误时，其错误码为2，也就是输出“instruction error”。换句话说，当出现多种错误时，优先考虑指令是否错误。当发送一个正确的指令时，在串口助手中选择与程序设计中不同的校验方式，就会输出“校验错误，请重新发送命令”。</p><p><strong>问题3</strong>：自己设定的三个中断有优先级的考虑吗？</p><p>答：程序中设置有接收中断、空闲中断、奇偶校验出错中断，但这三个中断本质上都属于串口中断，只不过这是引起串口中断的三种不同事件，当任意一件事件发生时，都会进入同一个串口中断服务函数，可以在中断服务函数中判断对应的标志位是否置1，进而确定是哪一个事件的发生导致进入了串口中断服务函数。因为不可能有两个及以上的事件同时发生，所以这三个中断事件之间不存在优先级的问题。另外，因为整个程序只用到了一个串口中断，不存在其它外设中断源，所以也可以不用对中断优先级进行设置。</p><p><strong>问题4</strong>：可以详细讲解一下中断的过程吗，比如各个中断的优先级，以及如果在主函数解析时中断关闭的方式等</p><p>答：一个外设（比如定时器、串口）要发生中断有三个条件，一是使能了外设，可类比为电路中的干路总开关；二是打开了中断使能位，可类比为支路的第一个开关（有多种事件可触发串口中断，可看成是多条支路）；三是对应事件的中断标志位置1（一般是硬件自动置1），可类比为支路第二个开关，只有三个开关全部合上，才会进入中断服务函数。</p><p>当发生中断时，程序会保存当前的数据和指令执行位置等信息到堆栈，称为现场保护。这个堆栈空间是硬件自动开辟的，数据的保存也是自动完成的，不需要在程序中再进行任何操作。保存完毕后，程序会查询中断向量表，向量表上保存的是各个中断的服务程序的起始地址，通过此地址可跳转到中断服务中执行中断服务体内的程序，当离开中断服务程序时，程序会从堆栈中弹出数据，返回到进入中断前的指令位置，继续执行当前程序。</p><p>中断的优先级一般指的是不同中断源之间的优先级别高低，比如程序中存在定时器中断和串口中断，那么这两个中断可能会同时触发，或者正在串口中断服务程序中执行时，定时器中断又被触发。当发生这些情况时，如果没有相应的处理机制，系统将会陷入混乱。由此引入的中断优先级的概念，即将每个中断源都设置一个优先级别，这样，遇到上述情况时，就可以根据优先级的高低来决定当前去处理那一部分的程序。如果优先级一样，或者在程序中没有设置中断优先级，那么系统会根据向量表中默认的优先级进行处理。</p><p>STM32中文手册中的第9章可以查看中断的相关信息，串口1中断的默认优先级为44。</p><img src="/2025/03/25/stm32-serial-communication/b2eee2b9777f769eb190cda7a48a8928.png" class="" title="img"><img src="/2025/03/25/stm32-serial-communication/90645357ced89ef8de50648623d21f19.png" class="" title="img"><p>​    STM32通过4位数据对优先级进行编程设置，在程序中设置中断优先级时，有优先级分组、抢占优先级和响应优先级三个参数设置，系统复位后默认的中断优先级优先级分组设置为0，即全部用于响应优先级，不存在抢占优先级。详情见STM32固件库手册，本文不再赘述。在本文程序的主函数中解析数据时，如果要关闭中断，只需要关闭上面提到的三个开关中任意一个即可，最简单的就是直接失能串口外设，其代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">USART_Cmd</span>(USART1, DISABLE);    <span class="hljs-comment">/* 失能USART1 */</span><br></code></pre></td></tr></table></figure><p>当输出数据后，可以再次开启串口，进行下一次的接收。</p><p><strong>问题5</strong>：如何编写中断服务函数</p><p>答：进入中断服务函数后，首先是对标志位进行判断，确认中断事件，然后是标志位的清除，避免一直进入中断服务函数。接下来有两种思路，一是将发生该中断事件时需要处理的逻辑代码全部放在该程序中，比如数据的保存、LED等的亮灭等等，执行完毕后退出中断服务函数；二是设置一个标志位，然后在主函数的while循环中判断此外部变量标志位的值，进而进行相关操作。</p><p><strong>问题6</strong>：解析数据时关闭中断这样会不会有后续数据的丢失？</p><p>答：分两种情况，如果在解析数据时，又从上位机发送了数据到单片机，那么这部分数据会丢失，因为中断已经关闭，无法进入中断服务函数，数据根本无法接收，只会在硬件缓冲区一次又一次的被覆盖。如果在解析数据时没有新的数据传输到单片机，等解析完毕后，中断再次打开时，才有数据传输过来，那么对数据是没有任何影响的。当然，单片机处理数据的数据还是比较快的，如果上一次传输的数据比较少，解析数据的时间花费少，中断可以很快再次打开，那么是感觉不到什么影响的，如果一次传输大量数据，在下一次传输时就可能存在丢失数据的情况，也就是丢包。</p><p><strong>问题7</strong>：当数据进入中断的时候，主函数是在等待吗？如果是的话中断函数比较多，怎么保证当中断结束时主函数能从原来的位置直接运行？</p><p>答：当进入中断时，主函数的确是处于等待状态，但第二个问题不需要担心，每一次进入中断时，硬件会自动进行现场保护，也就是开辟堆栈空间，保存当前的状态信息，当然也包括当前指令执行的位置，中断服务函数结束后，数据从堆栈中弹出，程序回到进入中断前的现场，继续执行。整个过程都是硬件自动完成，程序员不用做任何操作。</p><p><strong>问题8</strong>：如果传输数据中，出现终止符怎么办？</p><p>答：一般不会在串口助手中发送终止符，字符串终止符(也就是空字符)的Ascii码为0x00，在本文程序中，如果出现终止符，后续数据也是能够接收的，即能够保存在数组中。但是在单片机的串口发送函数中，遇到空字符就会认为数据已经结束，后续的数据不会被发送。遇到这种问题，暂时没有一个好的解决方案，可以考虑修改串口发送函数，不再以是否为空字符为结束标志，而是确定一个明确的数据长度。</p><p><strong>问题9</strong>：程序中字符串的发送是怎么实现的？</p><p>答：程序中的字符串发送没有用到任何中断，当然也可以使用中断，在中断服务函数中再调用数据发送函数。库函数void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)可以实现通过串口发送引脚TX，发送1字节数据的功能，第一个参数为串口号，第二个参数为发送的数据，因为STM32中的串口发送数据的字长有8位和9位两种，所以此参数类型为uint16_t，即16位。但是一般8位最常用，因为刚好一个字节，9位的用得较少。发送数据后需要等待当前数据发送完成才能进行下一次的发送，也就是等待发送完成标志位TC置1，代码为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">USART_GetFlagStatus</span>(USART1,USART_FLAG_TC )==RESET);<br></code></pre></td></tr></table></figure><p>为了实现字符串的发送，也就是多个字节连续发送，可定义一个函数，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Send_data</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(*data!=<span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>      <span class="hljs-keyword">while</span>(<span class="hljs-built_in">USART_GetFlagStatus</span>(USART1,USART_FLAG_TC )==RESET);<br><br>      <span class="hljs-built_in">USART_SendData</span>(USART1,*data);<br><br>      data++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当没有到达字符串的结束标志’\0’之前，循环调用数据发送函数，同时指针移到下一位。值得注意的是，如果使用了串口发送功能，那么最好在串口初始化函数usart1_init()中最后加一句清除发送完成标志的代码，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">USART_ClearFlag</span>(USART1,USART_FLAG_TC);    <span class="hljs-comment">//清除发送完成标志位</span><br></code></pre></td></tr></table></figure><p><strong>问题10</strong>：除了数字还可以发送其他信息吗？</p><p>答：可以的，传输的数据在传输线上就是一个个的高低电平，在单片机内部就是01…这种的二进制数，将其用不同的译码规则翻译就是不同的信息。一般将其保存到字符数组中，也就是字符类型，符合Ascii码规则，包含了数字、字母、特殊字符等信息。</p><p><strong>问题11</strong>：一次发送数据的上限是多少？</p><p>答：理论上是没有限制的，也就是单片机的串口可以连续工作，一直发送、接收数据，实际使用时通常在软件中定义一个缓冲数组，数组的大小就决定了一次发送数据的上限。本程序中定义大小为100。</p><p><strong>问题12</strong>：@printdata12345678900#多次与@printdata12345678901234567890…12345678900#数据传输的差别可以说一下么？</p><p>答：@printdata12345678900#多次，例如发送@printdata12345678900#@printdata12345678900#@printdata12345678900#时，按照本文程序的设计思路，依次检查首尾指令，符合要求，将会正确打印中间数据部分，即打印12345678900#@printdata12345678900#@printdata1234567890</p><p>  发送@printdata12345678901234567890…12345678900#时，同样检查首尾指令，符合要求，将会正确打印中间数据部分，即打印12345678901234567890…1234567890</p><p><strong>问题13</strong>：在stm32端奇偶校验位要算在数据位中，在PC端奇偶校验位是否要算在数据位中？</p><p>答：这个与PC端串口调试助手开发的源码有关系，但是大部分软件都是如果在软件界面的数据位选择为8位，校验位选择奇检验或偶校验，那么调试助手会将接收到的数据的低8位作为数据位，最高位单独取出作为校验位。所以一般来说，PC端奇偶校验位不算在数据位中。</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在linux操作系统上编译并运行wpa_supplicant</title>
    <link href="/2025/03/25/linux-compile-and-run-wpa_supplicant/"/>
    <url>/2025/03/25/linux-compile-and-run-wpa_supplicant/</url>
    
    <content type="html"><![CDATA[<p>前提：安装ubuntu虚拟机，本文使用的linux发行版本为Ubuntu 20.04.6 LTS</p><h2 id="1-编译wpa-supplicant软件"><a href="#1-编译wpa-supplicant软件" class="headerlink" title="1 编译wpa_supplicant软件"></a>1 编译wpa_supplicant软件</h2><h3 id="1-1-下载wpa-supplicant"><a href="#1-1-下载wpa-supplicant" class="headerlink" title="1.1 下载wpa_supplicant"></a>1.1 下载wpa_supplicant</h3><p>wpa_supplicant各版本下载页面：<a href="https://w1.fi/releases/">Index of &#x2F;releases</a></p><p>在页面中，不同前缀开头的表示不同的程序，后面的数字代表版本号</p><ul><li>- Prism2</li><li>- hostap</li><li>- hostap-driver</li><li>- hostap-utils</li><li>- hostapd</li><li>- wpa_supplican</li><li>- wpa_supplicant-cygwin-bin</li><li>- wpa_supplicant-windows-bin</li></ul><p>本文只需下载wpa_supplican前缀的包即可，在Linux系统中下载命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/Documents<br><span class="hljs-built_in">cd</span> ~/Documents<br>wget https://w1.<span class="hljs-keyword">fi</span>/releases/wpa_supplicant-2.10.tar.gz<br>tar -xzvf wpa_supplicant-2.10.tar.gz<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10<br></code></pre></td></tr></table></figure><p>进入wpa_supplicant-2.10文件夹，查看wpa_supplicant&#x2F;README</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim wpa_supplicant/README<br></code></pre></td></tr></table></figure><p>搜索关键字<a href="http://www.openssl，可以看到如下内容：">www.openssl，可以看到如下内容：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">Optional libraries <span class="hljs-keyword">for</span> EAP-TLS, EAP-PEAP, and EAP-TTLS:<br> <br>- OpenSSL (tested with 1.0.1 and 1.0.2 versions; assumed to<br>  work with most relatively recent versions; this is likely to be<br>  available with most distributions, http://www.openssl.org/)<br>- GnuTLS<br>- internal TLSv1 implementation<br></code></pre></td></tr></table></figure><p>说明该wpa_supplicant版本依赖openssl 1.0.1或1.0.2版本，因此还需要安装openssl</p><h3 id="1-2-下载openssl"><a href="#1-2-下载openssl" class="headerlink" title="1.2 下载openssl"></a>1.2 下载openssl</h3><p>OpenSSL是一个开源的密码学库和SSL&#x2F;TLS协议实现，下载页面：[<a href="https://www.openssl.org/source/"> Downloads ] - &#x2F;source&#x2F;index.html</a></p><p>1.0.1是较老的版本，下载页面：[<a href="https://www.openssl.org/source/old/1.0.1/"> 1.0.1 ] - &#x2F;source&#x2F;old&#x2F;1.0.1&#x2F;index.html</a></p><p>只需下载第一个链接即可，在Linux系统中下载命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br>wget https://www.openssl.org/source/old/1.0.1/openssl-1.0.1u.tar.gz<br>tar -zxvf openssl-1.0.1u.tar.gz<br><span class="hljs-built_in">cd</span> openssl-1.0.1u<br></code></pre></td></tr></table></figure><h3 id="1-3-编译安装openssl"><a href="#1-3-编译安装openssl" class="headerlink" title="1.3 编译安装openssl"></a>1.3 编译安装openssl</h3><p>进入openssl-1.0.1u文件夹，执行以下命令安装openssl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> openssl-1.0.1u<br>./config --openssldir=/usr/local/bin/openssl-1.0.1u shared<br>sudo make<br>sudo make install<br><span class="hljs-built_in">ls</span> -l /usr/bin/openssl<br>openssl version -a<br>sudo <span class="hljs-built_in">mv</span> /usr/bin/openssl /usr/bin/openssl_old<br> <br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/openssl-1.0.1u/bin/openssl /usr/bin/openssl<br><span class="hljs-built_in">ls</span> -l /usr/bin/openssl<br>openssl_old version -a<br>openssl version -a<br></code></pre></td></tr></table></figure><p>注意：.&#x2F;config –openssldir命令中指定了openssl的安装路径</p><p>因为本文使用的系统已经安装过openssl，所以将已安装的openssl软链接改为openssl_old，再创建了一个新的openssl软链接</p><p>最后输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">OpenSSL 1.0.1u  22 Sep 2016<br>built on: Tue Sep 12 11:14:06 2023<br>platform: linux-x86_64<br>options:  bn(64,64) rc4(16x,int) des(idx,cisc,16,int) idea(int) blowfish(idx)<br>compiler: gcc -I. -I.. -I../include  -fPIC -DOPENSSL_PIC -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -Wa,--noexecstack -m64 -DL_ENDIAN -O3 -Wall -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DWHIRLPOOL_ASM -DGHASH_ASM<br>OPENSSLDIR: <span class="hljs-string">&quot;/usr/local/bin/openssl-1.0.1u&quot;</span><br></code></pre></td></tr></table></figure><h3 id="1-4-安装libnl、libssl和libdbus"><a href="#1-4-安装libnl、libssl和libdbus" class="headerlink" title="1.4 安装libnl、libssl和libdbus"></a>1.4 安装libnl、libssl和libdbus</h3><p>安装wpa_supplicant还需要libnl、libssl和libdbus库的支持</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install libdbus-1-dev<br>sudo apt-get install libssl-dev<br>sudo apt-get install libnl-3-dev libnl-3-200 libnl-genl-3-dev libnl-route-3-dev<br></code></pre></td></tr></table></figure><p>注意，上述命令中的几个libnl包，只要有一个能安装成功即可，测试libnl-genl-3-dev在Ubuntu 20.04.6 LTS上可以正常安装</p><p>安装成功后，使用命令查看libnl包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt list libnl*<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">ibnl-3-200-dbg<br>libnl-3-200<br>libnl-3-dev<br>libnl-cli-3-200<br>libnl-cli-3-dev<br>libnl-genl-3-200<br>libnl-genl-3-dev<br>libnl-idiag-3-200<br>libnl-idiag-3-dev<br>libnl-nf-3-200<br>libnl-nf-3-dev<br>libnl-route-3-200<br>libnl-route-3-dev<br>libnl-utils<br>libnl-xfrm-3-200<br>libnl-xfrm-3-dev<br>libnlopt-cxx-dev<br>libnlopt-cxx0<br>libnlopt-dev<br>libnlopt-guile0<br>libnlopt0<br></code></pre></td></tr></table></figure><p>对照以上包，缺少哪一个就再安装那一个包</p><h3 id="1-5-编译安装wpa-supplicant"><a href="#1-5-编译安装wpa-supplicant" class="headerlink" title="1.5 编译安装wpa_supplicant"></a>1.5 编译安装wpa_supplicant</h3><p>最后，编译并安装wpa_supplicant，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant<br><span class="hljs-built_in">cp</span> defconfig .config<br><span class="hljs-built_in">ls</span> -l .config<br>sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/openssl-1.0.1u/lib/libcrypto.so /usr/lib/libcrypto.so<br>sudo make<br>sudo make install<br>wpa_supplicant -v<br></code></pre></td></tr></table></figure><p>最后输出结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_supplicant v2.10<br>Copyright (c) 2003-2022, Jouni Malinen &lt;j@w1.fi&gt; and contributors<br></code></pre></td></tr></table></figure><h3 id="1-6-编译结果"><a href="#1-6-编译结果" class="headerlink" title="1.6 编译结果"></a>1.6 编译结果</h3><p>在wpa_supplicant文件下可以看到编译后的可执行文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant<br>file * | grep <span class="hljs-string">&quot;ELF&quot;</span><br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli:                      ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=1ecc67063a6d45d7432f9d946a7ae3f2642cb47d, <span class="hljs-keyword">for</span> GNU/Linux 3.2.0, with debug_info, not stripped<br>wpa_passphrase:               ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=e6a666c4d5153295dbb1dc6c148bdac707a1dd82, <span class="hljs-keyword">for</span> GNU/Linux 3.2.0, with debug_info, not stripped<br>wpa_supplicant:               ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=49e7bf7c341bc72ceac844ef90f5ba3ad30fefd1, <span class="hljs-keyword">for</span> GNU/Linux 3.2.0, with debug_info, not stripped<br></code></pre></td></tr></table></figure><p>编译结果中有3个软件，wpa_supplicant、wpa_cli、wpa_passphrase</p><p>1、wpa_passphrase：用于向conf配置文件中添加网络配置信息，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo wpa_passphrase ssid passphrase | sudo <span class="hljs-built_in">tee</span> wpa_supplicant.conf`<br></code></pre></td></tr></table></figure><p>2、wpa_supplicant：用于启动wpa_supplicant应用程序，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo wpa_supplicant -D nl80211 -i wlan0 -c wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>3、wpa_cli：用于与 wpa_supplicant控制接口进行交互的命令行工具，例如</p><p>（1）扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli -i wlan0 scan<br></code></pre></td></tr></table></figure><p> （2）查看扫描结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli -i wlan0 scan_results<br></code></pre></td></tr></table></figure><p>安装之前，查看文件位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">whereis wpa_cli wpa_supplicant wpa_passphrase<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli: /usr/sbin/wpa_cli /usr/share/man/man8/wpa_cli.8.gz<br>wpa_supplicant: /usr/sbin/wpa_supplicant /etc/wpa_supplicant /usr/share/man/man8/wpa_supplicant.8.gz<br>wpa_passphrase: /usr/bin/wpa_passphrase /usr/share/man/man8/wpa_passphrase.8.gz<br></code></pre></td></tr></table></figure><p>安装之后，再使用whereis 命令查看位置</p><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli: /usr/sbin/wpa_cli /usr/local/sbin/wpa_cli /usr/share/man/man8/wpa_cli.8.gz<br>wpa_supplicant: /usr/sbin/wpa_supplicant /etc/wpa_supplicant /usr/local/sbin/wpa_supplicant /usr/share/man/man8/wpa_supplicant.8.gz<br>wpa_passphrase: /usr/bin/wpa_passphrase /usr/local/sbin/wpa_passphrase /usr/share/man/man8/wpa_passphrase.8.gz<br></code></pre></td></tr></table></figure><p>说明本次编译这3个软件安装的位置在&#x2F;usr&#x2F;local&#x2F;sbin，具体路径如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli: /usr/local/sbin/wpa_cli<br>wpa_supplicant: /usr/local/sbin/wpa_supplicant<br>wpa_passphrase: /usr/local/sbin/wpa_passphrase<br></code></pre></td></tr></table></figure><h2 id="2-运行wpa-supplicant"><a href="#2-运行wpa-supplicant" class="headerlink" title="2 运行wpa_supplicant"></a>2 运行wpa_supplicant</h2><h3 id="2-1-编辑wpa-supplicant-conf文件"><a href="#2-1-编辑wpa-supplicant-conf文件" class="headerlink" title="2.1 编辑wpa_supplicant.conf文件"></a>2.1 编辑wpa_supplicant.conf文件</h3><p>在运行wpa_supplicant时需要先设置conf文件</p><p>关于conf文件中各参数配置的详细解释，可以查看示例文件</p><p>wpa_supplicant-2.10&#x2F;wpa_supplicant&#x2F;wpa_supplicant.conf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant<br>vim wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>新建wpa_supplicant.conf文件如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim /etc/wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>在文件中输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl_interface=/var/run/wpa_supplicant<br>update_config=1<br>country=CN<br>ap_scan=1<br><br>network=&#123;<br>        ssid=<span class="hljs-string">&quot;xxxxxx&quot;</span><br>        psk=<span class="hljs-string">&quot;password&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后插入一个免驱的usb无线网卡，虽然免驱，其实是Linux系统已经自带了该类型网卡的驱动</p><p>插入网卡后，点击VirtualBox虚拟机上方窗口菜单的：设备-&gt;USB，选择对应的网卡设备</p><p>网卡名称前打勾后就表示生效，可以进行下一步操作</p><p>输入ifconfig查看网卡信息，结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wlan0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500<br>        ether 52:b0:60:45:0a:bc  txqueuelen 1000  (Ethernet)<br>        RX packets 0  bytes 0 (0.0 B)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 0  bytes 0 (0.0 B)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><p>注意：插入网卡后，系统会自动启动自带的wpa_supplicant进程，此时通过ps命令可以看到wpa_supplicant已经启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep wpa_supplicant<br></code></pre></td></tr></table></figure><p>可以切换到root用户，使用airmon-ng工具关闭系统自带的wpa_supplicant进程，再切换回普通用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install aircrack-ng<br>su root<br>airmon-ng check <span class="hljs-built_in">kill</span><br></code></pre></td></tr></table></figure><p>此时再输入ifconfig已经看不到wlan的网卡了，但是输入iw dev或ip link可以看到wlan0网卡</p><p>iw dev命令结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">phy<span class="hljs-comment">#0</span><br>Interface wlan0<br>ifindex 4<br>wdev 0x1<br>addr c0:1c:30:2f:ef:5d<br><span class="hljs-built_in">type</span> managed<br>txpower 20.00 dBm<br></code></pre></td></tr></table></figure><p>ip link命令结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">3: wlan0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc mq state DOWN mode DEFAULT group default qlen 1000<br>    <span class="hljs-built_in">link</span>/ether c0:1c:30:2f:ef:5d brd ff:ff:ff:ff:ff:ff<br></code></pre></td></tr></table></figure><h3 id="2-2-启动wpa-supplicant程序"><a href="#2-2-启动wpa-supplicant程序" class="headerlink" title="2.2 启动wpa_supplicant程序"></a>2.2 启动wpa_supplicant程序</h3><p>启动本文编译的wpa_supplicant即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant<br>sudo ./wpa_supplicant -D nl80211 -i wlan0 -c /etc/wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>上述命令中，各参数说明如下：</p><p>- 参数-D表示指定驱动，上述命令指定了nl80211驱动<br> - 参数-i表示指定网卡接口，上述命令指定了wlan0<br> - 参数-c表示指定conf文件路径，上述命令指定为&#x2F;etc&#x2F;wpa_supplicant.conf</p><p>还可以输出日志到指定文件，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./wpa_supplicant -D nl80211 -i wlan0 -c /etc/wpa_supplicant.conf -<span class="hljs-built_in">dd</span> &gt; ./wpa_supplicant.log<br></code></pre></td></tr></table></figure><p>若提示已经运行了wpa_supplicant，初始化wpa_supplicant失败，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl_iface exists and seems to be <span class="hljs-keyword">in</span> use - cannot override it<br>Delete <span class="hljs-string">&#x27;/var/run/wpa_supplicant/wlan0&#x27;</span> manually <span class="hljs-keyword">if</span> it is not used anymore<br>Failed to initialize control interface <span class="hljs-string">&#x27;/var/run/wpa_supplicant&#x27;</span>.<br>You may have another wpa_supplicant process already running or the file was<br>left by an unclean termination of wpa_supplicant <span class="hljs-keyword">in</span> <span class="hljs-built_in">which</span> <span class="hljs-keyword">case</span> you will need<br>to manually remove this file before starting wpa_supplicant again.<br><br>wlan0: CTRL-EVENT-DSCP-POLICY clear_all<br>wlan0: CTRL-EVENT-DSCP-POLICY clear_all<br>nl80211: deinit ifname=wlan0 disabled_11b_rates=0<br></code></pre></td></tr></table></figure><p>则运行以下命令，删除已经存在的socket文件wlan0，并杀死所有的wpa_supplicant进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">rm</span> /var/run/wpa_supplicant/wlan0<br>sudo killall wpa_supplicant<br></code></pre></td></tr></table></figure><p>也可以切换到root用户，使用airmon-ng工具关闭wpa_supplicant进程，再切换回普通用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install aircrack-ng<br>su root<br>airmon-ng check <span class="hljs-built_in">kill</span><br></code></pre></td></tr></table></figure><p>然后再次启动wpa_supplicant</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant/<br>sudo ./wpa_supplicant -D nl80211 -i wlan0 -c /etc/wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>运行完成后，新建终端，使用以下命令查看刚才启动的wpa_supplicant是否已经运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps aux | grep wpa_supplicant<br></code></pre></td></tr></table></figure><p>如果conf文件中配置了有效的无线网络，则可以看到类似以下输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">Successfully initialized wpa_supplicant<br>wlan0: CTRL-EVENT-REGDOM-CHANGE init=BEACON_HINT <span class="hljs-built_in">type</span>=UNKNOWN<br>wlan0: CTRL-EVENT-REGDOM-CHANGE init=USER <span class="hljs-built_in">type</span>=COUNTRY alpha2=CN<br>wlan0: SME: Trying to authenticate with 9c:8c:d8:00:a8:e0 (SSID=<span class="hljs-string">&#x27;xxxxxx&#x27;</span> freq=2412 MHz)<br>wlan0: Trying to associate with 9c:8c:d8:00:a8:e0 (SSID=<span class="hljs-string">&#x27;xxxxxx&#x27;</span> freq=2412 MHz)<br>wlan0: Associated with 9c:8c:d8:00:a8:e0<br>wlan0: CTRL-EVENT-SUBNET-STATUS-UPDATE status=0<br>wlan0: WPA: Key negotiation completed with 9c:8c:d8:00:a8:e0 [PTK=CCMP GTK=CCMP]<br>wlan0: CTRL-EVENT-CONNECTED - Connection to 9c:8c:d8:00:a8:e0 completed [<span class="hljs-built_in">id</span>=0 id_str=]<br></code></pre></td></tr></table></figure><p>在另一个终端中使用DHCP获取ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dhclient wlan0<br></code></pre></td></tr></table></figure><p>此时输入ifconfig可以看到已经获取到了ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 10.98.70.196  netmask 255.255.252.0  broadcast 10.98.71.255<br>        ether 2e:d0:00:6c:31:e4  txqueuelen 1000  (Ethernet)<br>        RX packets 39  bytes 6772 (6.6 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 94  bytes 13072 (12.7 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br></code></pre></td></tr></table></figure><h3 id="2-3-启动wpa-cli程序"><a href="#2-3-启动wpa-cli程序" class="headerlink" title="2.3 启动wpa_cli程序"></a>2.3 启动wpa_cli程序</h3><p>新建终端，运行wpa_cli程序</p><p>wpa_cli操作命令示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli -i wlan0 scan         　//扫描<br>wpa_cli -i wlan0 scan_result 　 //显示扫描结果<br>wpa_cli -i wlan0 status        //查看状态<br>wpa_cli -i wlan0 mib         　//获取设备的mib信息<br>wpa_cli -i wlan0 ping           //pings wpa_supplicant，wpa_supplicant收到后回复PONG<br><br>wpa_cli -i wlan0 add_network   //添加网络，会返回&lt;network <span class="hljs-built_in">id</span>&gt;<br>wpa_cli set_network &lt;network <span class="hljs-built_in">id</span>&gt;  ssid <span class="hljs-string">&quot;name&quot;</span>  //设置网络名称<br>wpa_cli set_network &lt;network <span class="hljs-built_in">id</span>&gt;  psk <span class="hljs-string">&quot;psk&quot;</span>　　 //设置网络密码<br>wpa_cli set_network &lt;network <span class="hljs-built_in">id</span>&gt; key_mgmt NONE  //无密码的网络<br>wpa_cli -i wlan0 save_config   //保存网络信息到配置文件<br><br>wpa_cli -i wlan0 list_network  //列出网络<br>wpa_cli -i wlan0 select_network  &lt;network <span class="hljs-built_in">id</span>&gt;  //选择网络<br>wpa_cli -i wlan0 enable_network  &lt;network <span class="hljs-built_in">id</span>&gt;  //使能网络，也就是连接网络<br>wpa_cli -i wlan0 disable_network &lt;network <span class="hljs-built_in">id</span>&gt;  //断开网络<br></code></pre></td></tr></table></figure><p>更多详细命令，输入以下命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli -h<br></code></pre></td></tr></table></figure><p>例如要连接test网络，密码为password，网卡接口为wlan0，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant/<br>sudo ./wpa_cli -i wlan0 add_network<br>sudo ./wpa_cli set_network 0 ssid <span class="hljs-string">&quot;test&quot;</span><br>sudo ./wpa_cli set_network 0 psk <span class="hljs-string">&quot;password&quot;</span><br>sudo ./wpa_cli -i wlan0 list_network<br>sudo ./wpa_cli -i wlan0 select_network 0<br>sudo ./wpa_cli -i wlan0 enable_network 0<br></code></pre></td></tr></table></figure><p>最后使用DHCP获取ip地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dhclient wlan0<br></code></pre></td></tr></table></figure><h2 id="3-运行wpa-gui"><a href="#3-运行wpa-gui" class="headerlink" title="3 运行wpa_gui"></a>3 运行wpa_gui</h2><h3 id="3-1-直接安装wpagui"><a href="#3-1-直接安装wpagui" class="headerlink" title="3.1 直接安装wpagui"></a>3.1 直接安装wpagui</h3><p>wpa_gui是图形化的管理工具，需要单独安装，安装命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install wpagui<br></code></pre></td></tr></table></figure><p>启动wpa_gui</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo wpa_gui<br></code></pre></td></tr></table></figure><h3 id="3-2-编译安装wpa-gui-qt4"><a href="#3-2-编译安装wpa-gui-qt4" class="headerlink" title="3.2 编译安装wpa_gui-qt4"></a>3.2 编译安装wpa_gui-qt4</h3><p>wpa_supplicant项目中也提供了一个wpa_gui-qt4程序</p><p>如果直接从wpa_supplicant项目中编译安装也是可以的，如下：</p><p>安装qmake</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qt5-qmake<br></code></pre></td></tr></table></figure><p>查询安装路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qmake -query | grep bin<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">QT_INSTALL_BINS:/usr/lib/qt5/bin<br>QT_HOST_BINS:/usr/lib/qt5/bin<br></code></pre></td></tr></table></figure><p>添加bin文件的路径到环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PATH=/usr/lib/qt5/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>然后安装qt5-default</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install qt5-default<br>sudo apt install libpcap-dev libncurses5-dev libprocps-dev libxtst-dev libxcb-util0-dev qttools5-dev-tools libdtkwidget-dev libdtkwm-dev pkg-config<br></code></pre></td></tr></table></figure><p>如果安装失败，尝试安装qtbase5-dev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install qtbase5-dev<br>sudo apt install libpcap-dev libncurses5-dev libxtst-dev libxcb-util0-dev qttools5-dev-tools libdtkwidget-dev pkg-config<br></code></pre></td></tr></table></figure><p>然后进入wpa_supplicant文件目录，编译安装wpa_gui-qt4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant<br>sudo make wpa_gui-qt4<br>sudo make install wpa_gui-qt4<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">make -C ../src install<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> ap common crypto drivers eapol_auth eapol_supp eap_common eap_peer eap_server l2_packet p2p pae radius rsn_supp tls utils wps fst; <span class="hljs-keyword">do</span> [ -d <span class="hljs-variable">$d</span> ] &amp;&amp; make -C <span class="hljs-variable">$d</span> install; <span class="hljs-keyword">done</span><br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br>Nothing to be made.<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">ls</span> eap_*.so &gt;/dev/null 2&gt;&amp;1; <span class="hljs-keyword">then</span> \<br>        install -d /usr/local/lib/wpa_supplicant &amp;&amp; \<br>        <span class="hljs-built_in">cp</span> *.so /usr/local/lib/wpa_supplicant \<br>; <span class="hljs-keyword">fi</span><br>make: <span class="hljs-string">&#x27;wpa_gui-qt4&#x27;</span> is up to <span class="hljs-built_in">date</span>.<br></code></pre></td></tr></table></figure><p>进入目录执行wpa_gui</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant/wpa_gui-qt4<br>sudo ./wpa_gui<br></code></pre></td></tr></table></figure><h2 id="4-修改代码后重新编译wpa-supplicant"><a href="#4-修改代码后重新编译wpa-supplicant" class="headerlink" title="4 修改代码后重新编译wpa_supplicant"></a>4 修改代码后重新编译wpa_supplicant</h2><p>应用程序wpa_cli就是通过创建的socket文件<code>/var/run/wpa_supplicant/wlan0</code>与wpa_supplicant程序进行交互</p><p>在文件src\utils\wpa_debug.h中可以看到wpa_supplicant的日志级别共有6种，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">enum &#123;<br>    MSG_EXCESSIVE, MSG_MSGDUMP, MSG_DEBUG, MSG_INFO, MSG_WARNING, MSG_ERROR<br>&#125;;<br></code></pre></td></tr></table></figure><p>查看当前的日志调试级别</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./wpa_cli -p/var/run/wpa_supplicant -iwlan0 log_level<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Current level: INFO<br>Timestamp: 0<br></code></pre></td></tr></table></figure><p>默认输出的级别为INFO，即EXCESSIVE、MSGDUMP、DEBUG级别的日志将不会输出</p><p>修改级别为DEBUG</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./wpa_cli -p/var/run/wpa_supplicant -iwlan0 log_level DEBUG<br></code></pre></td></tr></table></figure><p>若要在代码中修改调试级别，需要修改wpa_supplicant\main.c文件下的main()函数，找到对应位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">params.wpa_debug_level = MSG_INFO;<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">params.wpa_debug_level = MSG_DEBUG;<br></code></pre></td></tr></table></figure><p>修改wpa_supplicant的源码后，重新编译的命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/Documents<br><span class="hljs-built_in">cd</span> wpa_supplicant-2.10/wpa_supplicant<br>sudo make clean<br>sudo make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h2><ul><li>[1] <a href="https://wiki.archlinux.org/title/Wpa_supplicant#Troubleshooting">wpa_supplicant - ArchWiki</a></li><li>[2] <a href="https://www.linuxfromscratch.org/blfs/view/svn/basicnet/wpa_supplicant.html">https://www.linuxfromscratch.org/blfs/view/svn/basicnet/wpa_supplicant.html</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wifi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章汇总wifi网络测试命令</title>
    <link href="/2025/03/25/wifi-network-test-command/"/>
    <url>/2025/03/25/wifi-network-test-command/</url>
    
    <content type="html"><![CDATA[<p>本页面汇总了在系统启动后测试wifi功能的一些常用命令的使用方法，对从事网络测试、驱动开发等工作的人员有一定的帮助。</p><h2 id="1、ifconfig"><a href="#1、ifconfig" class="headerlink" title="1、ifconfig"></a><strong>1、ifconfig</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">ifconfig -a                   <span class="hljs-comment">#查看系统全部接口的信息</span><br>ifconfig wlan0                <span class="hljs-comment">#显示接口wlan0的信息</span><br>ifconfig wlan0 up             <span class="hljs-comment">#启动接口wlan0</span><br>ifconfig wlan0 down           <span class="hljs-comment">#关闭接口wlan0的ip地址</span><br>ifconfig wlan0 0.0.0.0        <span class="hljs-comment">#清除接口wlan0设置指定的ip地址</span><br>ifconfig wlan0 192.168.1.220  <span class="hljs-comment">#给接口wlan0设置指定的ip地址</span><br>ifconfig wlan0 10.98.68.220   <span class="hljs-comment">#给接口wlan0设置指定的ip地址</span><br><br><span class="hljs-comment">#给接口wlan0设置指定的ip地址、子网掩码和广播地址</span><br>ifconfig wlan0 192.168.1.56 netmask 255.255.255.0 broadcast 192.168.1.255 <br><br>ifconfig wlan0 add 33ffe:3240:800:1005::2/ 64    <span class="hljs-comment">#为网卡设置IPv6地址</span><br>ifconfig wlan0 del 33ffe:3240:800:1005::2/ 64    <span class="hljs-comment">#为网卡删除IPv6地址</span><br>ifconfig wlan0 hw ether 00:AA:BB:CC:DD:EE        <span class="hljs-comment">#修改MAC地址</span><br>ifconfig wlan0 mtu 1500                      <span class="hljs-comment">#设置最大数据包大小，单位bytes</span><br>ifconfig wlan0 arp            <span class="hljs-comment">#开启arp</span><br>ifconfig wlan0 -arp           <span class="hljs-comment">#关闭arp</span><br> <br>/etc/init.d/network restart    <span class="hljs-comment">#重启network，让以上手动设置的参数全部失效</span><br></code></pre></td></tr></table></figure><h2 id="2、ip"><a href="#2、ip" class="headerlink" title="2、ip"></a><strong>2、ip</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash">ip <span class="hljs-built_in">link</span> show                      <span class="hljs-comment"># 显示网络接口信息</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 up              <span class="hljs-comment"># 开启wlan0网卡</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 down            <span class="hljs-comment"># 关闭wlan0网卡</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 promisc on      <span class="hljs-comment"># 开启wlan0网卡的混合模式</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 promisc offi    <span class="hljs-comment"># 关闭wlan0网卡的混个模式</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 txqueuelen 1200 <span class="hljs-comment"># 设置wlan0网卡队列长度</span><br>ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlan0 mtu 1500        <span class="hljs-comment"># 设置wlan0网卡最大传输单元</span><br><br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev wlx94a67e79e164 down  <span class="hljs-comment">#关闭网卡</span><br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> wlx94a67e79e164 name wlan0  <span class="hljs-comment"># 修改网卡名称</span><br>sudo ip <span class="hljs-built_in">link</span> <span class="hljs-built_in">set</span> dev wlan0 up  <span class="hljs-comment">#打开网卡</span><br> <br>ip addr show                             <span class="hljs-comment"># 显示所有网卡地址信息</span><br>ip addr show  wlan0                      <span class="hljs-comment"># 显示wlan0网卡地址信息</span><br>ip addr add 192.168.0.1/24 dev wlan0     <span class="hljs-comment"># 设置wlan0网卡IP地址192.168.0.1</span><br>ip addr del 192.168.0.1/24 dev wlan0     <span class="hljs-comment"># 删除wlan0网卡IP地址</span><br> <br>ip route show                            <span class="hljs-comment"># 显示系统路由</span><br>ip route add default via 192.168.1.254   <span class="hljs-comment"># 设置系统默认路由</span><br>ip route list                            <span class="hljs-comment"># 查看路由信息</span><br><br><span class="hljs-comment"># 设置192.168.4.0网段的网关为192.168.0.254,数据走wlan0接口</span><br>ip route add 192.168.4.0/24  via  192.168.0.254 dev wlan0<br><br>ip route add default via 192.168.0.254  dev wlan0        <span class="hljs-comment"># 设置默认网关为192.168.0.254</span><br>ip route del 192.168.4.0/24   <span class="hljs-comment"># 删除192.168.4.0网段的网关</span><br>ip route del default          <span class="hljs-comment"># 删除默认路由</span><br>ip route delete 192.168.1.0/24 dev wlan0 <span class="hljs-comment"># 删除路由</span><br> <br>ip neigh list            <span class="hljs-comment"># 显示邻居表</span><br>ip route list            <span class="hljs-comment"># 显示核心路由表</span><br>ip <span class="hljs-built_in">link</span> list             <span class="hljs-comment"># 显示网络设备的运行状态</span><br>ip -s <span class="hljs-built_in">link</span> list          <span class="hljs-comment"># 显示更加详细的设备信息</span><br>ip <span class="hljs-built_in">link</span> | grep -E <span class="hljs-string">&#x27;^[0-9]&#x27;</span> | awk -F: <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>   <span class="hljs-comment"># 获取主机所有网络接口</span><br></code></pre></td></tr></table></figure><h2 id="3、iw"><a href="#3、iw" class="headerlink" title="3、iw"></a><strong>3、iw</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">iw list   <span class="hljs-comment"># 查看本机支持的无线特性。</span><br>iw dev    <span class="hljs-comment"># 查看无线接口信息</span><br>iw dev wlan0 scan              <span class="hljs-comment"># 扫描可用的无线网络</span><br>iw dev wlan0 connect &lt;SSID&gt;    <span class="hljs-comment"># 连接到无线网络</span><br>iw dev wlan0 disconnect        <span class="hljs-comment"># 断开当前的无线连接</span><br>iw dev wlan0 <span class="hljs-built_in">set</span> <span class="hljs-built_in">type</span> managed  <span class="hljs-comment"># 设置无线接口的工作模式</span><br>iw dev wlan0 <span class="hljs-built_in">set</span> channel 6     <span class="hljs-comment"># 设置无线接口的频道</span><br>iw dev wlan0 <span class="hljs-built_in">set</span> txpower 20    <span class="hljs-comment"># 设置无线接口的传输功率</span><br>iw dev wlan0 <span class="hljs-built_in">link</span>              <span class="hljs-comment"># 查看当前连接的无线网络信息</span><br>iw wlan0 info                  <span class="hljs-comment"># 获取设备工作状态信息</span><br>iw event                       <span class="hljs-comment">#获取所有网络设备的工作日志信息</span><br></code></pre></td></tr></table></figure><h2 id="4、wpa-passphrase"><a href="#4、wpa-passphrase" class="headerlink" title="4、wpa_passphrase"></a>4、wpa_passphrase</h2><p>生成wpa_supplicant.conf配置文件</p><p>假如网络名称为test，密码为12345678，生成配置文件的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_passphrase <span class="hljs-built_in">test</span> 12345678&gt; /etc/wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>也可以手动编辑配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /etc/wpa_supplicant.conf<br></code></pre></td></tr></table></figure><p>添加内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">network=&#123;<br>    ssid=<span class="hljs-string">&quot;test&quot;</span><br>    psk=<span class="hljs-string">&quot;12345678&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ssid为网络名称，psk为密码，若为开放网络，则没有psk</p><h2 id="5、wpa-supplicant"><a href="#5、wpa-supplicant" class="headerlink" title="5、wpa_supplicant"></a><strong>5、wpa_supplicant</strong></h2><p>启动wpa_supplicant应用程序如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_supplicant -D nl80211 -B -i wlan0 -c /etc/wpa_supplicant.conf -<span class="hljs-built_in">dd</span><br></code></pre></td></tr></table></figure><p>如果wpa_supplicant.conf文件不为空，则系统将按照该文件的网络配置信息连接wifi；如果wpa_supplicant.conf文件为空，则系统不会连接wifi，可以使用wpa_cli命令手动连接</p><h2 id="6、wpa-cli"><a href="#6、wpa-cli" class="headerlink" title="6、wpa_cli"></a><strong>6、wpa_cli</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli -i wlan0 scan         　//扫描<br>wpa_cli -i wlan0 scan_result 　 //显示扫描结果<br>wpa_cli -i wlan0 status        //查看状态<br>wpa_cli -i wlan0 mib         　//获取设备的mib信息<br>wpa_cli -i wlan0 ping           //pings wpa_supplicant，wpa_supplicant收到后回复PONG<br>  <br>wpa_cli -i wlan0 add_network   //添加网络，会返回&lt;network <span class="hljs-built_in">id</span>&gt;，从0开始递增<br>wpa_cli set_network &lt;network <span class="hljs-built_in">id</span>&gt;  ssid <span class="hljs-string">&quot;name&quot;</span>  //设置网络名称<br>wpa_cli set_network &lt;network <span class="hljs-built_in">id</span>&gt;  psk <span class="hljs-string">&quot;psk&quot;</span>　　 //设置网络密码<br>wpa_cli set_network &lt;network <span class="hljs-built_in">id</span>&gt; key_mgmt NONE  //无密码的网络<br>wpa_cli -i wlan0 save_config   //保存网络信息到配置文件<br>  <br>wpa_cli -i wlan0 list_network  //列出网络<br>wpa_cli -i wlan0 remove_network all  //移除所有网络<br>wpa_cli -i wlan0 select_network  &lt;network <span class="hljs-built_in">id</span>&gt;  //选择网络<br>wpa_cli -i wlan0 enable_network  &lt;network <span class="hljs-built_in">id</span>&gt;  //使能网络，也就是连接网络<br>wpa_cli -i wlan0 disable_network &lt;network <span class="hljs-built_in">id</span>&gt;  //断开网络<br> <br>wpa_cli -p/var/run/wpa_supplicant -iwlan0 log_level  //查看日志级别<br>wpa_cli -p/var/run/wpa_supplicant -iwlan0 log_level DEBUG  //修改日志级别 MSG_EXCESSIVE, MSG_MSGDUMP, MSG_DEBUG, MSG_INFO, MSG_WARNING, MSG_ERROR<br></code></pre></td></tr></table></figure><p>例如要连接test网络，密码为password，网卡接口为wlan0，命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wpa_cli -i wlan0 add_network  //假设返回的<span class="hljs-built_in">id</span>为0<br>wpa_cli set_network 0 ssid <span class="hljs-string">&quot;test&quot;</span> <br>wpa_cli set_network 0 psk <span class="hljs-string">&quot;password&quot;</span><br>wpa_cli -i wlan0 list_network<br>wpa_cli -i wlan0 select_network 0<br>wpa_cli -i wlan0 enable_network 0<br></code></pre></td></tr></table></figure><h2 id="7、dhcp"><a href="#7、dhcp" class="headerlink" title="7、dhcp"></a><strong>7、dhcp</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dhclient wlan0<br><br>dhcpcd wlan0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常用命令</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wifi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你安装Windows/Ubuntu双系统</title>
    <link href="/2025/03/25/windows-ubuntu-dualOS/"/>
    <url>/2025/03/25/windows-ubuntu-dualOS/</url>
    
    <content type="html"><![CDATA[<p> 要求：为了在linux下使用英伟达的显卡对深度学习模型进行加速，必须使用真实的Linux系统，所以特地安装了win+linux的双系统。</p><h2 id="制作U盘启动"><a href="#制作U盘启动" class="headerlink" title="制作U盘启动"></a>制作U盘启动</h2><p>制作U盘启动的目的是通过U盘进入到安装界面，并通过U盘文件进行安装Ubuntu操作系统</p><p>下载安装并打开UltraISO软件，选择继续试用</p><p>1、UltraISO软件下载地址：<a href="https://cn.ultraiso.net/xiazai.html">最新UltraISO官方免费下载 - UltraISO软碟通中文官方网站</a></p><img src="/2025/03/25/windows-ubuntu-dualOS/25dbae56dee996c1c0870c27324dc847.png" class="" title="img"><p>加载Ubuntu20.04的镜像文件iso</p><p>Ubuntu20.04 LTS镜像下载地址：<a href="https://ubuntu.com/download/desktop/thank-you?version=20.04&architecture=amd64">Thank you for downloading Ubuntu Desktop | Ubuntu</a></p><img src="/2025/03/25/windows-ubuntu-dualOS/8bd922290dc520137025756d1e5cb2e8.png" class="" title="img"><p> 插入一个U盘（后面会格式化，所以请提前备份数据）</p><p>选择选择写入硬盘映像</p><img src="/2025/03/25/windows-ubuntu-dualOS/e87161b4c7739d7239531929250cfbe6.png" class="" title="img"><p> 选择刚刚插入的U盘，依次选择格式化和写入</p><img src="/2025/03/25/windows-ubuntu-dualOS/a202e08c7d7aef76a9351b4080efd6c5.png" class="" title="img"><h2 id="给硬盘划分一个空闲分区"><a href="#给硬盘划分一个空闲分区" class="headerlink" title="给硬盘划分一个空闲分区"></a>给硬盘划分一个空闲分区</h2><p>划出的分区将会用来安装Ubuntu操作系统，根据自己的情况选择容量大小，建议50G以上</p><p>下载傲梅分区助手软件并打开（使用windows自带的磁盘管理工具也可以的）</p><p>选择一个空闲分区，选择调整&#x2F;移动分区，分出一部分空间出来</p><img src="/2025/03/25/windows-ubuntu-dualOS/249d2da0613236ca6391a06e8c3f3109.png" class="" title="img"><p>左右拖动红色框标记的圆形，或者直接在下面的分区大小中输入数字调整，点击确定，分配出足够的空闲空间</p><p>如果不够，可以从其他分区中继续相同的操作，直到分出的空闲空间大小满意为止</p><img src="/2025/03/25/windows-ubuntu-dualOS/5f1f96190e344a7fd865a9f33e97698b.png" class="" title="img"><p> 本文分出了80G，分出的空闲空间有一个*号，最后点击左上角的提交，确认分区操作</p><img src="/2025/03/25/windows-ubuntu-dualOS/92c29de5f0ced4d50e75446f6cdadf8a.png" class="" title="img"><h2 id="重启电脑，启动设备选择U盘"><a href="#重启电脑，启动设备选择U盘" class="headerlink" title="重启电脑，启动设备选择U盘"></a>重启电脑，启动设备选择U盘</h2><p>重启，按快捷键进入BIOS界面</p><p>本文为华硕主板，快捷键为del</p><img src="/2025/03/25/windows-ubuntu-dualOS/13a716b2fd144417d47e191041033e7e.jpeg" class="" title="img"><p>选择启动设备</p><p>因为我的windows10操作系统是传统模式启动（不是UEFI），所以我这里选择U盘的普通模式</p><p>如果你的windows系统是uefi启动的话，此处你最好选择UEFI的U盘启动（图中的最后一项）</p><p>选择与操作系统一样的启动方式是为了在后面Ubuntu的安装过程中识别出windosw操作系统</p><img src="/2025/03/25/windows-ubuntu-dualOS/0f4040ac01176c702fb383e0cbad7cab.jpeg" class="" title="img"><h2 id="安装Ubuntu20-04"><a href="#安装Ubuntu20-04" class="headerlink" title="安装Ubuntu20.04"></a>安装Ubuntu20.04</h2><p>默认是英文安装</p><p>这里选择中文简体安装，点击右边的安装Ubuntu</p><img src="/2025/03/25/windows-ubuntu-dualOS/0512d8e17e96f9c16a51ae3160d31fe0.jpeg" class="" title="img"><p>选择键盘布局</p><img src="/2025/03/25/windows-ubuntu-dualOS/038ce7a7c3aafe2e332e4f0be0face9d.jpeg" class="" title="img"><p>自己选择</p><img src="/2025/03/25/windows-ubuntu-dualOS/6b45de0b989b3125252e8776a853c550.jpeg" class="" title="img"><p>此处为重点 ，安装失败的原因多半在此</p><p>1、选择共存是最简单的操作</p><p>此时系统会自动将Ubuntu安装到硬盘的空闲空间，也就是第二步分出的空间。</p><p>简单也是有代价的，此时启动引导与windows的引导在一起，任何一个操作系统（win或者ubuntu）出现故障，可能会导致另一个系统引导失败，而无法正常进入。</p><p>如果此时没有识别出windows操作系统，说明前面U盘启动方式选择错，选择退出，换成U盘的另一种方式（带uefi，或不带uefi）</p><p>3、千万不要选择第二项清除安装</p><p>2、当然也可以选择其他选项，有很多教程会教你怎么分区和设置系统启动设备</p><p>在其他选项中设置比较灵活，可以自己选择Ubuntu的分区多少，以及分区大小和系统引导的安装位置</p><p>但是操作较为繁琐，而且引导位置设置不对，可能会导致系统重启失败</p><p>如果是新手，我个人建议就选第一项的共存安装</p><img src="/2025/03/25/windows-ubuntu-dualOS/d34f08afcfb648a2fb9024afadc00503.jpeg" class="" title="img"><p>将会格式化第二步分出的空闲空间</p><p>图中的7分区（ext4为Linux的分区格式）为Ubuntu的文件系统空间（相当于挂载点&#x2F;）</p><p>图中的3分区为系统的启动引导区（相当于boot分区或者efi分区）</p><img src="/2025/03/25/windows-ubuntu-dualOS/8e9a4f636dc329141c2e95ae776e8efc.jpeg" class="" title="img"><img src="/2025/03/25/windows-ubuntu-dualOS/abb1a22807fb402e6394e1acc0879e73.jpeg" class="" title="img"><p>选择位置</p><img src="/2025/03/25/windows-ubuntu-dualOS/a008e29b2778879ce6ba48e0f3b9e8f6.jpeg" class="" title="img"><p>输入账户和密码</p><img src="/2025/03/25/windows-ubuntu-dualOS/cdd0b623b71f3308617ce357da1f69f6.jpeg" class="" title="img"><p>开始安装</p><img src="/2025/03/25/windows-ubuntu-dualOS/583157b2bf79dc4c8ed1c214085e15a9.jpeg" class="" title="img"><img src="/2025/03/25/windows-ubuntu-dualOS/15d98404f0f9da039c663c7cd31cbba6.jpeg" class="" title="img"><p>安装完成后需要重启</p><img src="/2025/03/25/windows-ubuntu-dualOS/f1e9a9a27fd475230fbe85d18daaa567.jpeg" class="" title="img"><p>移除U盘，按下Enter键</p><img src="/2025/03/25/windows-ubuntu-dualOS/27431da14ffee9be1bb197b261cfce3a.jpeg" class="" title="img"><p>此时开机可以选择Ubuntu还是windows10</p><p>开机后系统会自动通过上文中提到的的3分区进入引导界面，默认的启动操作系统为ubuntu（带*号）</p><p>当选择windows10之后，会跳转到C盘对应路径启动</p><img src="/2025/03/25/windows-ubuntu-dualOS/1d1cc6f8f04407b8ed1f31111c0eedac.png" class="" title="img"><p>Linux下是可以识别到windoiws分区格式的，也可以看到原来的文件</p><p>但Windows下不能识别Linux分区格式（ext4等等），无法看到Linux下的文件</p><h2 id="Linux的修复"><a href="#Linux的修复" class="headerlink" title="Linux的修复"></a>Linux的修复</h2><p>如果因为一些其他原因导致重装了windows操作系统，重装后会丢失linux下的grub启动文件，导致无法进入linux，不用着急，可用以下办法修复grub，只需要几条简单命令即可解决，不会丢失任何文件，亲测有效。</p><p>第一步：插入上文制作的U盘启动盘，重启电脑，选择试用模式，进入linux系统</p><img src="/2025/03/25/windows-ubuntu-dualOS/0512d8e17e96f9c16a51ae3160d31fe0.jpeg" class="" title="img"><p>第二步：打开终端，查看linux分区位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo -i <br>fdisk -l<br></code></pre></td></tr></table></figure><img src="/2025/03/25/windows-ubuntu-dualOS/03df27a0ce8526ccdea0a4dd48b83e4f.png" class="" title="img"><img src="/2025/03/25/windows-ubuntu-dualOS/11da9b1170c548d28a8ada40146bd8ad.png" class="" title="img"><p>可以看到linux位于&#x2F;dev&#x2F;sda8</p><p>第三步：挂载linux分区，并安装grub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo mount /dev/sda8  /mnt<br>sudo grub-install --root-directory=/mnt/  /dev/sda<br></code></pre></td></tr></table></figure><img src="/2025/03/25/windows-ubuntu-dualOS/181dc1b59fc76891928761d9117db95f.png" class="" title="img"><p>显示No error reported 即为修复成功</p><p>第四步：添加windows启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 777 /boot/grub/grub.cfg <br>sudo grub-mkconfig &gt; /boot/grub/grub.cfg <br></code></pre></td></tr></table></figure><img src="/2025/03/25/windows-ubuntu-dualOS/a0bda1f2eef94ac2c54d6b76da5a4937.png" class="" title="img"><p>重启电脑就好，linux下的所有文件都不会丢失</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自适应中值滤波算法的Matlab实现</title>
    <link href="/2025/03/25/matlab-adaptive-median-filtering-algorithm/"/>
    <url>/2025/03/25/matlab-adaptive-median-filtering-algorithm/</url>
    
    <content type="html"><![CDATA[<p> 本文程序来自冈萨雷斯数字图像处理Matlab中文版附录C</p><p>相对原文程序，（1）将第8行的‘|’更改为‘||’（2）第11行注释。其余保持不变。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%自适应中值滤波</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span> = <span class="hljs-title">adpmedian</span> <span class="hljs-params">(g, Smax)</span></span><br><span class="hljs-comment">% ADPMEDIAN Parform adaptive median filtering.</span><br><span class="hljs-comment">%   F = ADPMEDIAN(G, SMAX) performs adaptive median filtering of</span><br><span class="hljs-comment">%   image G. The median filter starts at size 3-by-3 and iterates up</span><br><span class="hljs-comment">%   to size SMAX-by-SMAX. SMAX must be an odd integer greater than 1.</span><br><span class="hljs-comment">% SMAX must be an odd, positive integer greater than 1.</span><br><span class="hljs-keyword">if</span> (Smax &lt;= <span class="hljs-number">1</span>) || (Smax/<span class="hljs-number">2</span> == <span class="hljs-built_in">round</span>(Smax/<span class="hljs-number">2</span>)) || (Smax ~= <span class="hljs-built_in">round</span>(Smax))<br>    error (<span class="hljs-string">&#x27;SMAX must be an odd integer &gt; 1.&#x27;</span>)<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% [M, N] = size(g);</span><br><span class="hljs-comment">% Initial setup.</span><br>f = g;<br>f(:) = <span class="hljs-number">0</span>;<br>alreadyProcessed = <span class="hljs-built_in">false</span> (<span class="hljs-built_in">size</span>(g));<br><span class="hljs-comment">% Begin filtering.</span><br><span class="hljs-keyword">for</span> k = <span class="hljs-number">3</span>:<span class="hljs-number">2</span>:Smax<br>    zmin = ordfilt2(g, <span class="hljs-number">1</span>, <span class="hljs-built_in">ones</span>(k, k),<span class="hljs-string">&#x27;symmetric&#x27;</span>);<br>    zmax = ordfilt2(g, k * k, <span class="hljs-built_in">ones</span>(k, k), <span class="hljs-string">&#x27;symmetric&#x27;</span>);<br>    zmed = medfilt2(g, [k k], <span class="hljs-string">&#x27;symmetric&#x27;</span>);<br>    processUsingLevelB  = (zmed &gt; zmin) &amp; (zmax &gt; zmed) &amp;...<br>        ~alreadyProcessed;<br>    zB = (g &gt; zmin) &amp; (zmax &gt; g);<br>    outputZxy = processUsingLevelB &amp; zB;<br>    outputZmed = processUsingLevelB &amp; ~zB;<br>    f (outputZxy) = g(outputZxy);<br>    f (outputZmed) = zmed(outputZmed);<br>    alreadyProcessed = alreadyProcessed | processUsingLevelB;<br>    <span class="hljs-keyword">if</span> all (alreadyProcessed (:))<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">% Output zmed for any remaining unprocessed pixels. Note that this</span><br><span class="hljs-comment">% zmed was computed using a window of size Smax-by-Smax, which is</span><br><span class="hljs-comment">% the final value of k in the loop.</span><br>f (~alreadyProcessed) = zmed (~alreadyProcessed);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>使用方法： f &#x3D; adpmedian (g, Smax)</p><p>其中：g为输入二维图像，Smax为最大滤波尺寸，f为自适应滤波后输出图像</p><p>参考实例：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs matlab">Gray = imread(<span class="hljs-string">&#x27;cameraman.tif&#x27;</span>); <span class="hljs-comment">%读取图像文件</span><br><br><span class="hljs-comment">%加入各种浓度的椒盐噪声</span><br>N1 = imnoise(Gray,<span class="hljs-string">&#x27;salt &amp; pepper&#x27;</span>,<span class="hljs-number">0.05</span>);<span class="hljs-comment">%椒盐噪声，噪声密度0.05</span><br>N2 = imnoise(Gray,<span class="hljs-string">&#x27;salt &amp; pepper&#x27;</span>,<span class="hljs-number">0.25</span>);<span class="hljs-comment">%椒盐噪声，噪声密度0.25</span><br>N3 = imnoise(Gray,<span class="hljs-string">&#x27;salt &amp; pepper&#x27;</span>,<span class="hljs-number">0.45</span>);<span class="hljs-comment">%椒盐噪声，噪声密度0.45</span><br>N4 = imnoise(Gray,<span class="hljs-string">&#x27;salt &amp; pepper&#x27;</span>,<span class="hljs-number">0.65</span>);<span class="hljs-comment">%椒盐噪声，噪声密度0.65</span><br><br><span class="hljs-comment">%中值滤波</span><br>M1 = medfilt2(N1);<br>M2 = medfilt2(N2);<br>M3 = medfilt2(N3);<br>M4 = medfilt2(N4);<br><br><span class="hljs-comment">%自适应中值滤波</span><br>f1 = adpmedian(N1,<span class="hljs-number">11</span>);<br>f2 = adpmedian(N2,<span class="hljs-number">11</span>);<br>f3 = adpmedian(N3,<span class="hljs-number">11</span>);<br>f4 = adpmedian(N4,<span class="hljs-number">11</span>);<br><br><span class="hljs-built_in">figure</span><br>subplot(<span class="hljs-number">341</span>);<br>imshow(N1);<br>subplot(<span class="hljs-number">342</span>);<br>imshow(N2);<br>subplot(<span class="hljs-number">343</span>);<br>imshow(N3);<br>subplot(<span class="hljs-number">344</span>);<br>imshow(N4);<br><br>subplot(<span class="hljs-number">345</span>);<br>imshow(M1);<br>subplot(<span class="hljs-number">346</span>);<br>imshow(M2);<br>subplot(<span class="hljs-number">347</span>);<br>imshow(M3);<br>subplot(<span class="hljs-number">348</span>);<br>imshow(M4);<br><br>subplot(<span class="hljs-number">349</span>);<br>imshow(f1);<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">10</span>);<br>imshow(f2);<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>);<br>imshow(f3);<br>subplot(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>);<br>imshow(f4);<br></code></pre></td></tr></table></figure><p>实验效果如下：</p><p>第一行分别为加入浓度0.05、0.25、0.45、0.65的椒盐噪声</p><p>第二行为中值滤波medfilt2处理效果，默认滤波尺寸 3*3</p><p>第三行为自适应中值滤波adpmedian 处理效果，最大滤波尺寸为11*11</p><img src="/2025/03/25/matlab-adaptive-median-filtering-algorithm/faa5198d015875739a3fcdb847e4f7c3.jpeg" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>算法实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蒙特卡洛加模拟退火算法的Matlab实现</title>
    <link href="/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/"/>
    <url>/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><ol><li>一个企业生产一件产品共有M项任务需要完成，依次记为A、B、C、……</li><li>任务的完成需要遵循一定的顺序，A任务完成后才能去完成B，B完成后才能去完成C，以此类推，称为有顺序约束。</li><li>此时有N(N&gt;&#x3D;M)名员工可以完成这些任务，员工编号依次为1、2、3….，且每个员工只能固定完成一项任务</li><li>由于工作能力不同，每名员工完成不同任务耗费的时间不一样，如下表1所示。</li></ol><table><thead><tr><th>任务&#x2F;时间</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>A</td><td>21</td><td>18</td><td>16</td><td>22</td><td>14</td></tr><tr><td>B</td><td>35</td><td>28</td><td>33</td><td>26</td><td>22</td></tr><tr><td>C</td><td>12</td><td>16</td><td>11</td><td>14</td><td>11</td></tr></tbody></table><ol start="5"><li><p>现按任务的顺序为各任务安排合适的员工，各员工按编号从小到大的顺序进行排队，对每一个员工可以做出同意或拒绝的选择，且只有一次机会，当选择同意时，按任务的先后顺序为此员工安排一项任务，当选择拒绝时，此员工离开队伍，后续不能再向其安排任务。例如：</p><ul><li><p>当前最新任务为A，1号员工到来，拒绝1号完成任务A，1号离开，2号员工到来，接受2号员工完成任务A</p></li><li><p>当前最新任务变为B，3号员工到来，拒绝3号完成任务B，3号离开，4号员工到来，接受4号员工完成任务B</p></li><li><p>当前最新任务变为C，5号员工到来，接受5号员工完成任务C</p></li></ul></li></ol><p>因为条件5的限制，导致表1发生了一些变化，</p><ul><li>1号员工不可能分配到任务B、C、…，因为这样就没有员工完成A了，同理有以下限制</li><li>2号员工不可能分配到任务C…</li><li>4号员工不可能分配到任务A…</li><li>5号员工不可能分配到任务A、B…</li></ul><p>对于不可能分配到的任务，此员工完成时间记为无穷大，如下表2所示</p><table><thead><tr><th>任务&#x2F;时间</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>A</td><td>21</td><td>18</td><td>16</td><td>∞</td><td>∞</td></tr><tr><td>B</td><td>∞</td><td>28</td><td>33</td><td>26</td><td>∞</td></tr><tr><td>C</td><td>∞</td><td>∞</td><td>11</td><td>14</td><td>11</td></tr></tbody></table><p>问此时如何为每一个任务分配一个员工去，能够达到生产一件产品耗费总时间最小？</p><h2 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h2><p>理想情况下，应该为每一个任务安排耗时最短的员工完成，可以看到，3号员工完成任务A，4号员工完成任务B，5号员工完成任务C，刚好满足条件，而且完美错开，可以达到总耗时最短的要求，总耗时为16+26+11&#x3D;53。但是如果错不开怎么办，即某一个员工在完成多件任务都是耗时最短的情况下，就不能这么简单处理了，所以要考虑一般的情况。</p><p>一般的，在这个问题中，任务的完成是固定顺序，员工的选择也是从前到后，那么组合的情况就是123、124、134、235等等。可以认为是从5个员工中选3个，然后按顺序排队，依次分配一个任务，可以选择的组合数为$C^3_5$对每一种组合下计算对应的耗费时间，即可得到耗时最短的一种组合情况。</p><p>Matlab程序如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 文件名：example1.m</span><br><span class="hljs-comment">% 时间：2020年9月29日</span><br><span class="hljs-comment">% 作者：乐观的lishan</span><br><span class="hljs-comment">% 功能：遍历法计算顺序指派问题</span><br>clear,close,clc<br>warning off<br>tic<br><br><span class="hljs-comment">%生成代价矩阵</span><br>d = [<span class="hljs-number">21</span>   <span class="hljs-number">18</span>   <span class="hljs-number">16</span>   <span class="hljs-built_in">inf</span>   <span class="hljs-built_in">inf</span>;<br>     <span class="hljs-built_in">inf</span>  <span class="hljs-number">28</span>   <span class="hljs-number">33</span>   <span class="hljs-number">26</span>    <span class="hljs-built_in">inf</span>;<br>     <span class="hljs-built_in">inf</span>  <span class="hljs-built_in">inf</span>  <span class="hljs-number">11</span>   <span class="hljs-number">14</span>    <span class="hljs-number">11</span>]; <br> <br>M = <span class="hljs-built_in">size</span>(d,<span class="hljs-number">1</span>);    <span class="hljs-comment">%任务数 </span><br>N = <span class="hljs-built_in">size</span>(d,<span class="hljs-number">2</span>);    <span class="hljs-comment">%员工数,员工应数大于或等于任务数</span><br><br>C = <span class="hljs-built_in">nchoosek</span>(<span class="hljs-number">1</span>:N,M);  <span class="hljs-comment">%求出所有的组合情况</span><br>n = <span class="hljs-built_in">size</span>(C,<span class="hljs-number">1</span>);<br>Sum = <span class="hljs-built_in">zeros</span>(n,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:n<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:M <br>         Sum(<span class="hljs-built_in">i</span>) = Sum(<span class="hljs-built_in">i</span>) + d(<span class="hljs-built_in">j</span>,C(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)); <br>    <span class="hljs-keyword">end</span> <br>     <br><span class="hljs-keyword">end</span><br>min_Sum = <span class="hljs-built_in">min</span>(Sum);<br>min_plan = (C((Sum == min_Sum),:));<br>num_plan = <span class="hljs-built_in">size</span>(min_plan,<span class="hljs-number">1</span>);<br>toc<br><br><span class="hljs-comment">%输出结果</span><br>fprintf(<span class="hljs-string">&#x27;完成指派任务的方案总数为:%.0f\n&#x27;</span>,n)<br>fprintf(<span class="hljs-string">&#x27;完成指派任务耗费的最短时间为:%.0f\n&#x27;</span>,<span class="hljs-built_in">min</span>(Sum))<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:num_plan<br>    fprintf(<span class="hljs-string">&#x27;对应第%d种指派方案为:%s\n&#x27;</span>,<span class="hljs-built_in">i</span>,num2str(min_plan(<span class="hljs-built_in">i</span>,:)))<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">%绘制耗费时间坐标图</span><br><span class="hljs-built_in">plot</span>(Sum,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">%绘图说明</span><br>xlabel(<span class="hljs-string">&#x27;组合编号&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;耗费时间&#x27;</span>)<br>title(<span class="hljs-string">&#x27;不同组合方案下的时间耗费示意图&#x27;</span>)<br></code></pre></td></tr></table></figure><p>求出结果如下：</p><img src="/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/bff14baef1b4a1ec47beb90c5468b73c.png" class="" title="img"><p>求出结果为3号员工完成任务A，4号员工完成任务B，5号员工完成任务C，此时耗费时间最短，最短时间为53</p><p>但是这是数据量比较少的情况，一旦数据增大，就不能再使用遍历了，比如，任务数为27，员工数为35，组合方式就达两千三百万种之多，此时需要寻找一种更好的方法</p><img src="/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/a40a48ff529a4fe23d1e43baf0b1ff95.png" class="" title="img"><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>更一般的，对于一个离散的组合优化问题，可以使用蒙特卡洛加模拟退火算法解决</p><p>算法步骤描述如下：</p><ul><li><p>step1：使用蒙特卡洛方法生成随机选择一个最优的组合，作为初始解，并计算初始能量值（目标函数值）</p></li><li><p>step2：初始化模拟退火算法参数，初始温度T，终止温度e，温度衰减因子alf，马尔科夫链长度L，能量不再降低的次数上限cnt_limit</p></li><li><p>step3：马尔科夫链长度加1，判断是否达到上限，若是，算法结束，否则，开始step4</p></li><li><p>step4：当前温度下，在当前解的基础上进行扰动构造一个新解，本文中构造方法为：先将当前解的组合中随机去掉一个员工，再随机添加一个新员工。生成一个新解（一种组合），并计算能量值，即目标函数值（耗费总时间）</p></li><li><p>step5：计算与前一个解的能量之差</p></li><li><p>step6：根据能量差判断是否接受新解。若能量差小于0 ，说明新解的能量更低，接受新解；否则 ，说明新解的能量没有下降，以玻尔兹曼概率接受新解。同时记录最优解和对应的最低能量值（最小目标函数值）</p></li><li><p>step7：判断最低能量值是否保持不变，若是，计数器加1，否则，计数器清0。若计数器到达上限，算法结束。</p></li><li><p>step8：降低温度，判断温度是否达到下限，若是，算法结束，否则，转向step3</p></li></ul><p>程序如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 文件名：example2.m</span><br><span class="hljs-comment">% 时间：2020年9月29日</span><br><span class="hljs-comment">% 作者：乐观的lishan</span><br><span class="hljs-comment">% 功能：利用模拟退火算法计算有顺序约束的指派问题</span><br>clear,close,clc<br>warning off<br>tic<br><br><span class="hljs-comment">%数据的生成</span><br>M = <span class="hljs-number">27</span>;       <span class="hljs-comment">%任务数 </span><br>N = <span class="hljs-number">35</span>;       <span class="hljs-comment">%员工数,员工应数大于任务数</span><br>lb = <span class="hljs-number">10</span>;      <span class="hljs-comment">%成本下限</span><br>ub = <span class="hljs-number">35</span>;      <span class="hljs-comment">%成本上限</span><br><br><span class="hljs-comment">%利用随机数生成代价矩阵</span><br>d = unifrnd (lb, ub, M, N);  <span class="hljs-comment">%生成一个服从均匀分布的矩阵，数值范围[lb,ub]，矩阵大小M×N</span><br>d = <span class="hljs-built_in">ceil</span>(d); <span class="hljs-comment">%朝正无穷大取整</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">2</span>:M<br>    d(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>:<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>) = <span class="hljs-built_in">inf</span>;<br>    d(M-<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>,N-(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>)+<span class="hljs-number">1</span>:N) = <span class="hljs-built_in">inf</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 保存数据，可用于下一次用相同的数据实验</span><br>save data <br><br><span class="hljs-comment">%运行一次后可将此行上面的所有代码注释，再次运行即可使用相同的数据</span><br>load data.mat  <br><br><span class="hljs-comment">%初始化决策变量和函数值，即模拟退火中的状态和内能</span><br>S0 = <span class="hljs-built_in">sort</span>(randperm(N,M));    <span class="hljs-comment">%初始化分配策略，决策变量，即状态</span><br>Sum = <span class="hljs-built_in">inf</span>;                   <span class="hljs-comment">%初始化能量，目标函数值</span><br>H = <span class="hljs-number">20</span>;                      <span class="hljs-comment">%蒙特卡洛生成组合数次数</span><br><span class="hljs-comment">%生成初始解，用蒙特卡洛方法随机生成H种组合，并选择其中一个较好的指派组合</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:H   <br>     S = <span class="hljs-built_in">sort</span>(randperm(N,M));<br>     temp = <span class="hljs-number">0</span>; <br>     <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:M <br>         temp=temp+d(<span class="hljs-built_in">i</span>,S(<span class="hljs-built_in">i</span>)); <br>     <span class="hljs-keyword">end</span> <br>     <span class="hljs-keyword">if</span> temp &lt; Sum <br>         S0 = S;<br>         Sum = temp; <br>     <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br><span class="hljs-comment">%记录蒙特卡洛选优结果</span><br>sum = Sum;  <br>s0 = S0;<br><br><span class="hljs-comment">%模拟退火算法的参数设置</span><br>e = <span class="hljs-number">0.1</span>^<span class="hljs-number">30</span>; <span class="hljs-comment">%终止温度</span><br>L = <span class="hljs-number">5000</span>;    <span class="hljs-comment">%Markov链长度</span><br>alf = <span class="hljs-number">0.999</span>; <span class="hljs-comment">%温度衰减因子</span><br>T = <span class="hljs-number">1</span>;       <span class="hljs-comment">%起始温度</span><br>cnt_limit = <span class="hljs-number">300</span>;        <span class="hljs-comment">%最优值连续保持不变的次数上限</span><br><br>all_people = <span class="hljs-number">1</span>:N;       <span class="hljs-comment">%所有元素构成的集合</span><br>S0 = s0;<br>cnt = <span class="hljs-number">0</span>;<br><br>record_solve(<span class="hljs-number">1</span>,:) = S0;<br>record_value(<span class="hljs-number">1</span>,:) = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:M<br>    record_value = record_value + d(<span class="hljs-built_in">i</span>,S0(<span class="hljs-built_in">i</span>));<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%退火过程 </span><br><span class="hljs-keyword">for</span> k=<span class="hljs-number">2</span>:L <br>    <span class="hljs-comment">%产生新解 </span><br>    original_solve = S0; <span class="hljs-comment">%保留原解</span><br>    remain_people = setdiff(all_people,S0);    <span class="hljs-comment">%求当前解在所有元素构成的集合中的补集</span><br>    index1 = randperm(N-M,<span class="hljs-number">1</span>); <br>    index2 = randperm(M,<span class="hljs-number">1</span>);<br>    add_num = remain_people(index1);   <span class="hljs-comment">%随机添加一个新元素</span><br>    S0(index2) = [];                   <span class="hljs-comment">%随机删除当前解的一个元素</span><br>    new_solve = <span class="hljs-built_in">sort</span>([S0,add_num]);    <span class="hljs-comment">%添加一个新元素并排序生成新解</span><br>    record_solve(k,:) = new_solve;<br>    <span class="hljs-comment">%计算代价函数值，即当前时刻目标值（内能）减去前一时刻目标值（内能）</span><br>    d1 = <span class="hljs-number">0</span>;<br>    d2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:M<br>        d1 = d1 + d(<span class="hljs-built_in">i</span>,original_solve(<span class="hljs-built_in">i</span>));        <span class="hljs-comment">%交换前，目标函数值</span><br>        d2 = d2 + d(<span class="hljs-built_in">i</span>,new_solve(<span class="hljs-built_in">i</span>));             <span class="hljs-comment">%交换后，目标函数值</span><br>    <span class="hljs-keyword">end</span><br>    df = d2-d1; <span class="hljs-comment">%内能差</span><br>    record_value(k,:) = d2;<br>    <br>    <span class="hljs-comment">%接受准则 </span><br>    <span class="hljs-keyword">if</span> df&lt;<span class="hljs-number">0</span>  <span class="hljs-comment">%内能降低，此解与上一解比较更优</span><br>        S0 = new_solve;   <br>        <span class="hljs-keyword">if</span> d2 &lt; Sum(k<span class="hljs-number">-1</span>)<br>            bset_solve = new_solve;<br>            Sum(k) = d2;<br>        <span class="hljs-keyword">else</span><br>            Sum(k) = Sum(k<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">exp</span>(-df/T)&gt;<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment">%内能增大，此解与上一解比较更差，以玻尔兹曼概率接受此解</span><br>            S0 = new_solve;      <br>        <span class="hljs-keyword">else</span>    <span class="hljs-comment">%内能增大，且不接受新解</span><br>            S0 = original_solve;<br>        <span class="hljs-keyword">end</span><br>        Sum(k) = Sum(k<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">%判断最优值是否不再变动</span><br>    <span class="hljs-keyword">if</span> Sum(k) == Sum(k<span class="hljs-number">-1</span>)<br>        cnt = cnt + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> cnt &gt;= cnt_limit<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span><br>        cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">%温度判断</span><br>    T=T*alf;  <span class="hljs-comment">%降低温度，开始冷却</span><br>    <span class="hljs-keyword">if</span> T&lt;e   <span class="hljs-comment">%温度小于临界值，算法提前结束</span><br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span><br><br>toc<br><br><span class="hljs-comment">%结果验证</span><br>d3 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:M<br>    d3 = d3 + d(<span class="hljs-built_in">i</span>,bset_solve(<span class="hljs-built_in">i</span>));     <br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">if</span> d3 == Sum(<span class="hljs-keyword">end</span>)<br>    fprintf(<span class="hljs-string">&#x27;结果验证【成功】\n&#x27;</span>)<br><span class="hljs-keyword">else</span><br>    fprintf(<span class="hljs-string">&#x27;结果验证【失败】\n&#x27;</span>)<br><span class="hljs-keyword">end</span><br><br>best_plan = (record_solve((record_value == Sum(<span class="hljs-keyword">end</span>)),:));<br>[b,location]= unique(best_plan,<span class="hljs-string">&#x27;rows&#x27;</span>,<span class="hljs-string">&#x27;first&#x27;</span>);<br>res = <span class="hljs-built_in">sortrows</span>([location,b]);<br>new_best_plan=res(:,<span class="hljs-number">2</span>:<span class="hljs-built_in">size</span>(res,<span class="hljs-number">2</span>));<br><span class="hljs-comment">%输出结果</span><br>fprintf(<span class="hljs-string">&#x27;完成指派任务的方案总数为:%.0f\n&#x27;</span>,<span class="hljs-built_in">nchoosek</span>(N,M))<br>fprintf(<span class="hljs-string">&#x27;程序迭代次数为:%.0f\n&#x27;</span>,<span class="hljs-built_in">length</span>(Sum))<br>fprintf(<span class="hljs-string">&#x27;完成指派任务所需的最少成本为:%.0f\n&#x27;</span>,Sum(<span class="hljs-keyword">end</span>))<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-built_in">size</span>(new_best_plan,<span class="hljs-number">1</span>)<br>    fprintf(<span class="hljs-string">&#x27;对应第%d种指派方案为:%s\n&#x27;</span>,<span class="hljs-built_in">i</span>,num2str(new_best_plan(<span class="hljs-built_in">i</span>,:)))<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%绘制收敛坐标图</span><br><span class="hljs-built_in">plot</span>(Sum,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;LineWidth&#x27;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">%绘图说明</span><br>xlabel(<span class="hljs-string">&#x27;收敛次数&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;成本值&#x27;</span>)<br>title([<span class="hljs-string">&#x27;收敛示意图：&#x27;</span>,<span class="hljs-string">&#x27;第&#x27;</span>,num2str(<span class="hljs-built_in">length</span>(Sum)),<span class="hljs-string">&#x27;次收敛&#x27;</span>])<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>记录两次较好的运行结果</p><p>运行结果1：</p><img src="/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/a3bd8d719e484861d0b8d64ce7fdb6ac.png" class="" title="img"><p>运行结果2：</p><img src="/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/be49ad63ef26b4880138fa22cbf81982.png" class="" title="img"><p>更改任务数、员工总数，程序也能很快的完成收敛。当然模拟退火每次运行结果不一样，可以多运行几次，记录一个较好的结果，这样能够在短时间内得到一个较好解方案。通过遍历法可以验证模拟退火算法结果的有效性，其结果保持一致，但模拟退火算法可以更快得出结果。</p><img src="/2025/03/25/matlab-montecarlo-simulated-annealing-algorithm/1e6dbbf659f01aba3724b1bbdbcca284.png" class="" title="img"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文首先对有顺序约束的任务指派问题进行了分析，有顺序约束即任务的完成有先后顺序之分，员工的选取也有先后顺序之分，即只能向后选取，在这个限制条件下，本文先给出了遍历法的解决方法，并给出了Matlab代码和示例结果；然后再提出在任务数和员工数增大的情况下遍历法不再适用，因为本质上这是一个离散的组合优化问题，由此引入了蒙特卡洛算法加模拟退火算法的解决思路，并给出了算法步骤和Matlab代码以及示例结果。</p><p>本文的模拟退火算法与一般退火算法不同，由于本文的组合情况有顺序约束，常规退火算法中的扰动方法不再适用，本文使用方法为：在当前解中随机删除一个元素，再随机加入一个新元素的方法构造新解，最终取得了比较好的效果。</p><p>感谢博主“乐观的阿锡”<a href="https://blog.csdn.net/demon_xi">乐观的阿锡的博客_CSDN博客-计算机,go语言,Linux系统编程学习笔记领域博主</a>为本文提供了问题基础以及解决的思路</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p>[1] 李冰,徐杰,杜文.用模拟退火算法求解有顺序约束指派问题[J].系统工程理论方法应用,2002(04):330-335.</p></li><li><p>[2] 赵越.模拟退火算法求解指派问题新探[J].吉林建筑工程学院学报,2011,28(04):61-63.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蚁群算法的Matlab实现</title>
    <link href="/2025/03/25/matlab-ant-colony-algorithm/"/>
    <url>/2025/03/25/matlab-ant-colony-algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我方有一个基地，经度和纬度为（70,40）。假设我方飞机的速度为 1000 公里&#x2F;小时。我方派一架飞机从基地出发，侦察完敌方所有目标，再返回原来的基地。在敌方每一目标点的侦察时间不计，求该架飞机所花费的时间（假设我方飞机巡航时间可以充分长）。</p><p>已知敌方100 个目标的经度、纬度数据在文件sj.txt中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">53</span>.<span class="hljs-number">7121</span>    <span class="hljs-number">15</span>.<span class="hljs-number">3046</span>    <span class="hljs-number">51</span>.<span class="hljs-number">1758</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0322</span>    <span class="hljs-number">46</span>.<span class="hljs-number">3253</span>    <span class="hljs-number">28</span>.<span class="hljs-number">2753</span>   <span class="hljs-number">30</span>.<span class="hljs-number">3313</span>    <span class="hljs-number">6</span>.<span class="hljs-number">9348</span><br><span class="hljs-attribute">56</span>.<span class="hljs-number">5432</span>    <span class="hljs-number">21</span>.<span class="hljs-number">4188</span>    <span class="hljs-number">10</span>.<span class="hljs-number">8198</span>    <span class="hljs-number">16</span>.<span class="hljs-number">2529</span>   <span class="hljs-number">22</span>.<span class="hljs-number">7891</span>    <span class="hljs-number">23</span>.<span class="hljs-number">1045</span>   <span class="hljs-number">10</span>.<span class="hljs-number">1584</span>    <span class="hljs-number">12</span>.<span class="hljs-number">4819</span><br><span class="hljs-attribute">20</span>.<span class="hljs-number">1050</span>    <span class="hljs-number">15</span>.<span class="hljs-number">4562</span>    <span class="hljs-number">1</span>.<span class="hljs-number">9451</span>     <span class="hljs-number">0</span>.<span class="hljs-number">2057</span>    <span class="hljs-number">26</span>.<span class="hljs-number">4951</span>    <span class="hljs-number">22</span>.<span class="hljs-number">1221</span>   <span class="hljs-number">31</span>.<span class="hljs-number">4847</span>    <span class="hljs-number">8</span>.<span class="hljs-number">9640</span><br><span class="hljs-attribute">26</span>.<span class="hljs-number">2418</span>    <span class="hljs-number">18</span>.<span class="hljs-number">1760</span>    <span class="hljs-number">44</span>.<span class="hljs-number">0356</span>    <span class="hljs-number">13</span>.<span class="hljs-number">5401</span>   <span class="hljs-number">28</span>.<span class="hljs-number">9836</span>    <span class="hljs-number">25</span>.<span class="hljs-number">9879</span>   <span class="hljs-number">38</span>.<span class="hljs-number">4722</span>    <span class="hljs-number">20</span>.<span class="hljs-number">1731</span><br><span class="hljs-attribute">28</span>.<span class="hljs-number">2694</span>    <span class="hljs-number">29</span>.<span class="hljs-number">0011</span>    <span class="hljs-number">32</span>.<span class="hljs-number">1910</span>    <span class="hljs-number">5</span>.<span class="hljs-number">8699</span>    <span class="hljs-number">36</span>.<span class="hljs-number">4863</span>    <span class="hljs-number">29</span>.<span class="hljs-number">7284</span>   <span class="hljs-number">0</span>.<span class="hljs-number">9718</span>     <span class="hljs-number">28</span>.<span class="hljs-number">1477</span><br><span class="hljs-attribute">8</span>.<span class="hljs-number">9586</span>     <span class="hljs-number">24</span>.<span class="hljs-number">6635</span>    <span class="hljs-number">16</span>.<span class="hljs-number">5618</span>    <span class="hljs-number">23</span>.<span class="hljs-number">6143</span>   <span class="hljs-number">10</span>.<span class="hljs-number">5597</span>    <span class="hljs-number">15</span>.<span class="hljs-number">1178</span>   <span class="hljs-number">50</span>.<span class="hljs-number">2111</span>    <span class="hljs-number">10</span>.<span class="hljs-number">2944</span><br><span class="hljs-attribute">8</span>.<span class="hljs-number">1519</span>     <span class="hljs-number">9</span>.<span class="hljs-number">5325</span>     <span class="hljs-number">22</span>.<span class="hljs-number">1075</span>    <span class="hljs-number">18</span>.<span class="hljs-number">5569</span>   <span class="hljs-number">0</span>.<span class="hljs-number">1215</span>     <span class="hljs-number">18</span>.<span class="hljs-number">8726</span>   <span class="hljs-number">48</span>.<span class="hljs-number">2077</span>    <span class="hljs-number">16</span>.<span class="hljs-number">8889</span><br><span class="hljs-attribute">31</span>.<span class="hljs-number">9499</span>    <span class="hljs-number">17</span>.<span class="hljs-number">6309</span>    <span class="hljs-number">0</span>.<span class="hljs-number">7732</span>     <span class="hljs-number">0</span>.<span class="hljs-number">4656</span>    <span class="hljs-number">47</span>.<span class="hljs-number">4134</span>    <span class="hljs-number">23</span>.<span class="hljs-number">7783</span>   <span class="hljs-number">41</span>.<span class="hljs-number">8671</span>    <span class="hljs-number">3</span>.<span class="hljs-number">5667</span><br><span class="hljs-attribute">43</span>.<span class="hljs-number">5474</span>    <span class="hljs-number">3</span>.<span class="hljs-number">9061</span>     <span class="hljs-number">53</span>.<span class="hljs-number">3524</span>    <span class="hljs-number">26</span>.<span class="hljs-number">7256</span>   <span class="hljs-number">30</span>.<span class="hljs-number">8165</span>    <span class="hljs-number">13</span>.<span class="hljs-number">4595</span>   <span class="hljs-number">27</span>.<span class="hljs-number">7133</span>    <span class="hljs-number">5</span>.<span class="hljs-number">0706</span><br><span class="hljs-attribute">23</span>.<span class="hljs-number">9222</span>    <span class="hljs-number">7</span>.<span class="hljs-number">6306</span>     <span class="hljs-number">51</span>.<span class="hljs-number">9612</span>    <span class="hljs-number">22</span>.<span class="hljs-number">8511</span>   <span class="hljs-number">12</span>.<span class="hljs-number">7938</span>    <span class="hljs-number">15</span>.<span class="hljs-number">7307</span>   <span class="hljs-number">4</span>.<span class="hljs-number">9568</span>     <span class="hljs-number">8</span>.<span class="hljs-number">3669</span><br><span class="hljs-attribute">21</span>.<span class="hljs-number">5051</span>    <span class="hljs-number">24</span>.<span class="hljs-number">0909</span>    <span class="hljs-number">15</span>.<span class="hljs-number">2548</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2111</span>   <span class="hljs-number">6</span>.<span class="hljs-number">2070</span>     <span class="hljs-number">5</span>.<span class="hljs-number">1442</span>    <span class="hljs-number">49</span>.<span class="hljs-number">2430</span>    <span class="hljs-number">16</span>.<span class="hljs-number">7044</span><br><span class="hljs-attribute">17</span>.<span class="hljs-number">1168</span>    <span class="hljs-number">20</span>.<span class="hljs-number">0354</span>    <span class="hljs-number">34</span>.<span class="hljs-number">1688</span>    <span class="hljs-number">22</span>.<span class="hljs-number">7571</span>   <span class="hljs-number">9</span>.<span class="hljs-number">4402</span>     <span class="hljs-number">3</span>.<span class="hljs-number">9200</span>    <span class="hljs-number">11</span>.<span class="hljs-number">5812</span>    <span class="hljs-number">14</span>.<span class="hljs-number">5677</span><br><span class="hljs-attribute">52</span>.<span class="hljs-number">1181</span>    <span class="hljs-number">0</span>.<span class="hljs-number">4088</span>     <span class="hljs-number">9</span>.<span class="hljs-number">5559</span>     <span class="hljs-number">11</span>.<span class="hljs-number">4219</span>   <span class="hljs-number">24</span>.<span class="hljs-number">4509</span>    <span class="hljs-number">6</span>.<span class="hljs-number">5634</span>    <span class="hljs-number">26</span>.<span class="hljs-number">7213</span>    <span class="hljs-number">28</span>.<span class="hljs-number">5667</span><br><span class="hljs-attribute">37</span>.<span class="hljs-number">5848</span>    <span class="hljs-number">16</span>.<span class="hljs-number">8474</span>    <span class="hljs-number">35</span>.<span class="hljs-number">6619</span>    <span class="hljs-number">9</span>.<span class="hljs-number">9333</span>    <span class="hljs-number">24</span>.<span class="hljs-number">4654</span>    <span class="hljs-number">3</span>.<span class="hljs-number">1644</span>    <span class="hljs-number">0</span>.<span class="hljs-number">7775</span>     <span class="hljs-number">6</span>.<span class="hljs-number">9576</span><br><span class="hljs-attribute">14</span>.<span class="hljs-number">4703</span>    <span class="hljs-number">13</span>.<span class="hljs-number">6368</span>    <span class="hljs-number">19</span>.<span class="hljs-number">8660</span>    <span class="hljs-number">15</span>.<span class="hljs-number">1224</span>   <span class="hljs-number">3</span>.<span class="hljs-number">1616</span>     <span class="hljs-number">4</span>.<span class="hljs-number">2428</span>    <span class="hljs-number">18</span>.<span class="hljs-number">5245</span>    <span class="hljs-number">14</span>.<span class="hljs-number">3598</span><br><span class="hljs-attribute">58</span>.<span class="hljs-number">6849</span>    <span class="hljs-number">27</span>.<span class="hljs-number">1485</span>    <span class="hljs-number">39</span>.<span class="hljs-number">5168</span>    <span class="hljs-number">16</span>.<span class="hljs-number">9371</span>   <span class="hljs-number">56</span>.<span class="hljs-number">5089</span>    <span class="hljs-number">13</span>.<span class="hljs-number">7090</span>   <span class="hljs-number">52</span>.<span class="hljs-number">5211</span>    <span class="hljs-number">15</span>.<span class="hljs-number">7957</span><br><span class="hljs-attribute">38</span>.<span class="hljs-number">4300</span>    <span class="hljs-number">8</span>.<span class="hljs-number">4648</span>     <span class="hljs-number">51</span>.<span class="hljs-number">8181</span>    <span class="hljs-number">23</span>.<span class="hljs-number">0159</span>   <span class="hljs-number">8</span>.<span class="hljs-number">9983</span>     <span class="hljs-number">23</span>.<span class="hljs-number">6440</span>   <span class="hljs-number">50</span>.<span class="hljs-number">1156</span>    <span class="hljs-number">23</span>.<span class="hljs-number">7816</span><br><span class="hljs-attribute">13</span>.<span class="hljs-number">7909</span>    <span class="hljs-number">1</span>.<span class="hljs-number">9510</span>     <span class="hljs-number">34</span>.<span class="hljs-number">0574</span>    <span class="hljs-number">23</span>.<span class="hljs-number">3960</span>   <span class="hljs-number">23</span>.<span class="hljs-number">0624</span>    <span class="hljs-number">8</span>.<span class="hljs-number">4319</span>    <span class="hljs-number">19</span>.<span class="hljs-number">9857</span>    <span class="hljs-number">5</span>.<span class="hljs-number">7902</span><br><span class="hljs-attribute">40</span>.<span class="hljs-number">8801</span>    <span class="hljs-number">14</span>.<span class="hljs-number">2978</span>    <span class="hljs-number">58</span>.<span class="hljs-number">8289</span>    <span class="hljs-number">14</span>.<span class="hljs-number">5229</span>   <span class="hljs-number">18</span>.<span class="hljs-number">6635</span>    <span class="hljs-number">6</span>.<span class="hljs-number">7436</span>    <span class="hljs-number">52</span>.<span class="hljs-number">8423</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2880</span><br><span class="hljs-attribute">39</span>.<span class="hljs-number">9494</span>    <span class="hljs-number">29</span>.<span class="hljs-number">5114</span>    <span class="hljs-number">47</span>.<span class="hljs-number">5099</span>    <span class="hljs-number">24</span>.<span class="hljs-number">0664</span>   <span class="hljs-number">10</span>.<span class="hljs-number">1121</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2662</span>   <span class="hljs-number">28</span>.<span class="hljs-number">7812</span>    <span class="hljs-number">27</span>.<span class="hljs-number">6659</span><br><span class="hljs-attribute">8</span>.<span class="hljs-number">0831</span>     <span class="hljs-number">27</span>.<span class="hljs-number">6705</span>    <span class="hljs-number">9</span>.<span class="hljs-number">1556</span>     <span class="hljs-number">14</span>.<span class="hljs-number">1304</span>   <span class="hljs-number">53</span>.<span class="hljs-number">7989</span>    <span class="hljs-number">0</span>.<span class="hljs-number">2199</span>    <span class="hljs-number">33</span>.<span class="hljs-number">6490</span>    <span class="hljs-number">0</span>.<span class="hljs-number">3980</span><br><span class="hljs-attribute">1</span>.<span class="hljs-number">3496</span>     <span class="hljs-number">16</span>.<span class="hljs-number">8359</span>    <span class="hljs-number">49</span>.<span class="hljs-number">9816</span>    <span class="hljs-number">6</span>.<span class="hljs-number">0828</span>    <span class="hljs-number">19</span>.<span class="hljs-number">3635</span>    <span class="hljs-number">17</span>.<span class="hljs-number">6622</span>   <span class="hljs-number">36</span>.<span class="hljs-number">9545</span>    <span class="hljs-number">23</span>.<span class="hljs-number">0265</span><br><span class="hljs-attribute">15</span>.<span class="hljs-number">7320</span>    <span class="hljs-number">19</span>.<span class="hljs-number">5697</span>    <span class="hljs-number">11</span>.<span class="hljs-number">5118</span>    <span class="hljs-number">17</span>.<span class="hljs-number">3884</span>   <span class="hljs-number">44</span>.<span class="hljs-number">0398</span>    <span class="hljs-number">16</span>.<span class="hljs-number">2635</span>   <span class="hljs-number">39</span>.<span class="hljs-number">7139</span>    <span class="hljs-number">28</span>.<span class="hljs-number">4203</span><br><span class="hljs-attribute">6</span>.<span class="hljs-number">9909</span>     <span class="hljs-number">23</span>.<span class="hljs-number">1804</span>    <span class="hljs-number">38</span>.<span class="hljs-number">3392</span>    <span class="hljs-number">19</span>.<span class="hljs-number">9950</span>   <span class="hljs-number">24</span>.<span class="hljs-number">6543</span>    <span class="hljs-number">19</span>.<span class="hljs-number">6057</span>   <span class="hljs-number">36</span>.<span class="hljs-number">9980</span>    <span class="hljs-number">24</span>.<span class="hljs-number">3992</span><br><span class="hljs-attribute">4</span>.<span class="hljs-number">1591</span>     <span class="hljs-number">3</span>.<span class="hljs-number">1853</span>     <span class="hljs-number">40</span>.<span class="hljs-number">1400</span>    <span class="hljs-number">20</span>.<span class="hljs-number">3030</span>   <span class="hljs-number">23</span>.<span class="hljs-number">9876</span>    <span class="hljs-number">9</span>.<span class="hljs-number">4030</span>    <span class="hljs-number">41</span>.<span class="hljs-number">1084</span>    <span class="hljs-number">27</span>.<span class="hljs-number">7149</span><br></code></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用蚁群算法解决如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 蚁群算法及Matlab实现—侦查路线问题</span><br><span class="hljs-comment">% 文件名：example1.m</span><br><span class="hljs-comment">% 时间：2020年9月13日</span><br><span class="hljs-comment">% 来源：https://blog.csdn.net/lishan132/article/details/108568242</span><br><span class="hljs-comment">% 参考：卓金武，王鸿钧编著. MATLAB 数学建模方法与实践 第 3 版. 北京航空航天大学出版社, 2018.07.</span><br><span class="hljs-comment">% 功能：利用蚁群算法计算侦察机从基地出发侦查完100个目标耗费的最短时间</span><br><br><span class="hljs-comment">%% 数据准备</span><br><span class="hljs-comment">% 清空环境变量</span><br>clear close clc<br><span class="hljs-comment">% 程序运行计时开始</span><br>t0 = clock;<br><span class="hljs-comment">%导入数据</span><br>load sj.txt        <span class="hljs-comment">%加载敌方 100 个目标的数据 </span><br><br><span class="hljs-comment">%% 计算侦查目标间相互距离</span><br>x=sj(:,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span>); x=x(:); <br>y=sj(:,<span class="hljs-number">2</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span>); y=y(:); <br>sj=[x y]; d1=[<span class="hljs-number">70</span>,<span class="hljs-number">40</span>];  <br>sj0=[d1;sj;d1]; sj=sj0*<span class="hljs-built_in">pi</span>/<span class="hljs-number">180</span>; <br><br><span class="hljs-comment">%生成距离矩阵</span><br>d=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">102</span>); <span class="hljs-comment">%距离矩阵 d </span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">101</span> <br>     <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>:<span class="hljs-number">102</span> <br>         temp=<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)-sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">1</span>))*<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))*<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>))+<span class="hljs-built_in">sin</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))*<span class="hljs-built_in">sin</span>(sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>)); <br>         d(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">6370</span>*<span class="hljs-built_in">acos</span>(temp); <br>     <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br>d=d+d&#x27;;<br><br>n = <span class="hljs-built_in">size</span>(sj0,<span class="hljs-number">1</span>);<br>D = d;<br><span class="hljs-comment">%% 初始化参数</span><br>m = <span class="hljs-number">120</span>;                             <span class="hljs-comment">% 蚂蚁数量</span><br>alpha = <span class="hljs-number">1</span>;                           <span class="hljs-comment">% 信息素重要程度因子</span><br><span class="hljs-built_in">beta</span> = <span class="hljs-number">5</span>;                            <span class="hljs-comment">% 启发函数重要程度因子</span><br>vol = <span class="hljs-number">0.2</span>;                           <span class="hljs-comment">% 信息素挥发(volatilization)因子</span><br>Q = <span class="hljs-number">10</span>;                              <span class="hljs-comment">% 常系数</span><br>Heu_F = <span class="hljs-number">1.</span>/D;                        <span class="hljs-comment">% 启发函数(heuristic function)</span><br>Tau = <span class="hljs-built_in">ones</span>(n,n);                     <span class="hljs-comment">% 信息素矩阵</span><br>Table = <span class="hljs-built_in">zeros</span>(m,n);                  <span class="hljs-comment">% 路径记录表</span><br>iter = <span class="hljs-number">1</span>;                            <span class="hljs-comment">% 迭代次数初值</span><br>iter_max = <span class="hljs-number">50</span>;                      <span class="hljs-comment">% 最大迭代次数 </span><br>Route_best = <span class="hljs-built_in">zeros</span>(iter_max,n);      <span class="hljs-comment">% 各代最佳路径       </span><br>Length_best = <span class="hljs-built_in">zeros</span>(iter_max,<span class="hljs-number">1</span>);     <span class="hljs-comment">% 各代最佳路径的长度  </span><br>Length_ave = <span class="hljs-built_in">zeros</span>(iter_max,<span class="hljs-number">1</span>);      <span class="hljs-comment">% 各代路径的平均长度  </span><br>Limit_iter = <span class="hljs-number">0</span>;                      <span class="hljs-comment">% 程序收敛时迭代次数</span><br><br><span class="hljs-comment">%% 迭代寻找最佳路径</span><br><span class="hljs-keyword">while</span> iter &lt;= iter_max<br>    <span class="hljs-comment">% 随机产生各个蚂蚁的起点城市</span><br>      start = <span class="hljs-built_in">zeros</span>(m,<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:m<br>          temp = randperm(n);<br>          start(<span class="hljs-built_in">i</span>) = temp(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">end</span><br>      Table(:,<span class="hljs-number">1</span>) = start; <br>      <span class="hljs-comment">% 构建解空间</span><br>      citys_index = <span class="hljs-number">1</span>:n;<br>      <span class="hljs-comment">% 逐个蚂蚁路径选择</span><br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:m<br>          <span class="hljs-comment">% 逐个城市路径选择</span><br>         <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">2</span>:n<br>             tabu = Table(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>:(<span class="hljs-built_in">j</span> - <span class="hljs-number">1</span>));           <span class="hljs-comment">% 已访问的城市集合(禁忌表)</span><br>             allow_index = ~<span class="hljs-built_in">ismember</span>(citys_index,tabu);    <span class="hljs-comment">% 参加说明1（程序底部）</span><br>             allow = citys_index(allow_index);  <span class="hljs-comment">% 待访问的城市集合</span><br>             P = allow;<br>             <span class="hljs-comment">% 计算城市间转移概率</span><br>             <span class="hljs-keyword">for</span> k = <span class="hljs-number">1</span>:<span class="hljs-built_in">length</span>(allow)<br>                 P(k) = Tau(tabu(<span class="hljs-keyword">end</span>),allow(k))^alpha * Heu_F(tabu(<span class="hljs-keyword">end</span>),allow(k))^<span class="hljs-built_in">beta</span>;<br>             <span class="hljs-keyword">end</span><br>             P = P/sum(P);<br>             <span class="hljs-comment">% 轮盘赌法选择下一个访问城市</span><br>            Pc = cumsum(P);     <span class="hljs-comment">%参加说明2(程序底部)</span><br>            target_index = <span class="hljs-built_in">find</span>(Pc &gt;= <span class="hljs-built_in">rand</span>); <br>            target = allow(target_index(<span class="hljs-number">1</span>));<br>            Table(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>) = target;<br>         <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-comment">% 计算各个蚂蚁的路径距离</span><br>      Length = <span class="hljs-built_in">zeros</span>(m,<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:m<br>          Route = Table(<span class="hljs-built_in">i</span>,:);<br>          <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:(n - <span class="hljs-number">1</span>)<br>              Length(<span class="hljs-built_in">i</span>) = Length(<span class="hljs-built_in">i</span>) + D(Route(<span class="hljs-built_in">j</span>),Route(<span class="hljs-built_in">j</span> + <span class="hljs-number">1</span>));<br>          <span class="hljs-keyword">end</span><br>          Length(<span class="hljs-built_in">i</span>) = Length(<span class="hljs-built_in">i</span>) + D(Route(n),Route(<span class="hljs-number">1</span>));<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-comment">% 计算最短路径距离及平均距离</span><br>      <span class="hljs-keyword">if</span> iter == <span class="hljs-number">1</span><br>          [min_Length,min_index] = <span class="hljs-built_in">min</span>(Length);<br>          Length_best(iter) = min_Length;  <br>          Length_ave(iter) = <span class="hljs-built_in">mean</span>(Length);<br>          Route_best(iter,:) = Table(min_index,:);<br>          Limit_iter = <span class="hljs-number">1</span>; <br><br>      <span class="hljs-keyword">else</span><br>          [min_Length,min_index] = <span class="hljs-built_in">min</span>(Length);<br>          Length_best(iter) = <span class="hljs-built_in">min</span>(Length_best(iter - <span class="hljs-number">1</span>),min_Length);<br>          Length_ave(iter) = <span class="hljs-built_in">mean</span>(Length);<br>          <span class="hljs-keyword">if</span> Length_best(iter) == min_Length<br>              Route_best(iter,:) = Table(min_index,:);<br>              Limit_iter = iter;<br>          <span class="hljs-keyword">else</span><br>              Route_best(iter,:) = Route_best((iter<span class="hljs-number">-1</span>),:);<br>          <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-comment">% 更新信息素</span><br>      Delta_Tau = <span class="hljs-built_in">zeros</span>(n,n);<br>      <span class="hljs-comment">% 逐个蚂蚁计算</span><br>      <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:m<br>          <span class="hljs-comment">% 逐个城市计算</span><br>          <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span> = <span class="hljs-number">1</span>:(n - <span class="hljs-number">1</span>)<br>              Delta_Tau(Table(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>),Table(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>)) = Delta_Tau(Table(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>),Table(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>+<span class="hljs-number">1</span>)) + Q/Length(<span class="hljs-built_in">i</span>);<br>          <span class="hljs-keyword">end</span><br>          Delta_Tau(Table(<span class="hljs-built_in">i</span>,n),Table(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)) = Delta_Tau(Table(<span class="hljs-built_in">i</span>,n),Table(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)) + Q/Length(<span class="hljs-built_in">i</span>);<br>      <span class="hljs-keyword">end</span><br>      Tau = (<span class="hljs-number">1</span>-vol) * Tau + Delta_Tau;<br>    <span class="hljs-comment">% 迭代次数加1，清空路径记录表</span><br>    iter = iter + <span class="hljs-number">1</span>;<br>    Table = <span class="hljs-built_in">zeros</span>(m,n);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%% 结果显示</span><br>[Shortest_Length,index] = <span class="hljs-built_in">min</span>(Length_best);<br>Shortest_Route = Route_best(index,:);<br>Time_Cost=etime(clock,t0);<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;最短距离:&#x27;</span> num2str(Shortest_Length)]);<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;最短时间:&#x27;</span> num2str(Shortest_Length/<span class="hljs-number">1000</span>) <span class="hljs-string">&#x27;小时&#x27;</span>]);<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;收敛迭代次数:&#x27;</span> num2str(Limit_iter)]);<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;程序执行时间:&#x27;</span> num2str(Time_Cost) <span class="hljs-string">&#x27;秒&#x27;</span>]);<br><br><span class="hljs-comment">%% 绘图</span><br><span class="hljs-built_in">figure</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment">%绘制坐标图</span><br><span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;bO&#x27;</span>)      <span class="hljs-comment">%目标坐标</span><br><span class="hljs-built_in">hold</span> on<br><span class="hljs-built_in">plot</span>(<span class="hljs-number">70</span>,<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;p&#x27;</span>,...  <span class="hljs-comment">%基地坐标</span><br>    <span class="hljs-string">&#x27;MarkerSize&#x27;</span>,<span class="hljs-number">10</span>,...<br>    <span class="hljs-string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,...<br>    <span class="hljs-string">&#x27;MarkerFaceColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-built_in">hold</span> on<br><span class="hljs-comment">%绘制路线图</span><br><span class="hljs-built_in">plot</span>([sj0(Shortest_Route,<span class="hljs-number">1</span>);sj0(Shortest_Route(<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)],...  <span class="hljs-comment">%三点省略符为Matlab续行符</span><br>     [sj0(Shortest_Route,<span class="hljs-number">2</span>);sj0(Shortest_Route(<span class="hljs-number">1</span>),<span class="hljs-number">2</span>)],<span class="hljs-string">&#x27;o-&#x27;</span>);<br>grid on<br><span class="hljs-built_in">hold</span> off<br>xlabel(<span class="hljs-string">&#x27;经度&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;纬度&#x27;</span>)<br>title([<span class="hljs-string">&#x27;ACA最优化侦查路线(侦查时间:&#x27;</span> num2str(Shortest_Length/<span class="hljs-number">1000</span>) <span class="hljs-string">&#x27;小时)&#x27;</span>])<br><span class="hljs-built_in">figure</span>(<span class="hljs-number">2</span>)<br><span class="hljs-comment">%绘制算法收敛图</span><br><span class="hljs-built_in">plot</span>(<span class="hljs-number">1</span>:iter_max,Length_best/<span class="hljs-number">1000</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&#x27;侦查最短时间&#x27;</span>)<br>xlabel(<span class="hljs-string">&#x27;迭代次数&#x27;</span>)<br>ylabel(<span class="hljs-string">&#x27;时间&#x27;</span>)<br>title(<span class="hljs-string">&#x27;算法收敛轨迹&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>蚁群算法每次运行的结果都不一样，下面选了一次效果比较好的结果展示</p><img src="/2025/03/25/matlab-ant-colony-algorithm/504f178af1464dcd1b4c4b530588d5e3.png" class="" title="img"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文根据已有的资料，对蚁群算法的Matlab程序进行分析，完善，并添加了相应的注释，给出了解决目标侦查路线问题，其本质也是TSP（Travelling salesman problem）问题的解决过程。</p><p>文中代码是在卓金武，王鸿钧编著的MATLAB 数学建模方法与实践一书中修改而来，只根据本文要解决的问题修改了前面距离矩阵的求法，调整了一下蚂蚁数量，并调整了绘图的相关代码，核心代码并未修改，仅作学习之用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>[1] 卓金武，王鸿钧编著. MATLAB 数学建模方法与实践 第 3 版. 北京航空航天大学出版社, 2018.07.</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遗传算法的Matlab实现</title>
    <link href="/2025/03/25/matlab-genetic-algorithm/"/>
    <url>/2025/03/25/matlab-genetic-algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我方有一个基地，经度和纬度为（70,40）。假设我方飞机的速度为 1000 公里&#x2F;小时。我方派一架飞机从基地出发，侦察完敌方所有目标，再返回原来的基地。在敌方每一目标点的侦察时间不计，求该架飞机所花费的时间（假设我方飞机巡航时间可以充分长）。 </p><p>已知敌方100 个目标的经度、纬度数据在文件sj.txt中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">53</span>.<span class="hljs-number">7121</span>    <span class="hljs-number">15</span>.<span class="hljs-number">3046</span>    <span class="hljs-number">51</span>.<span class="hljs-number">1758</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0322</span>    <span class="hljs-number">46</span>.<span class="hljs-number">3253</span>    <span class="hljs-number">28</span>.<span class="hljs-number">2753</span>   <span class="hljs-number">30</span>.<span class="hljs-number">3313</span>    <span class="hljs-number">6</span>.<span class="hljs-number">9348</span> <br><span class="hljs-attribute">56</span>.<span class="hljs-number">5432</span>    <span class="hljs-number">21</span>.<span class="hljs-number">4188</span>    <span class="hljs-number">10</span>.<span class="hljs-number">8198</span>    <span class="hljs-number">16</span>.<span class="hljs-number">2529</span>   <span class="hljs-number">22</span>.<span class="hljs-number">7891</span>    <span class="hljs-number">23</span>.<span class="hljs-number">1045</span>   <span class="hljs-number">10</span>.<span class="hljs-number">1584</span>    <span class="hljs-number">12</span>.<span class="hljs-number">4819</span> <br><span class="hljs-attribute">20</span>.<span class="hljs-number">1050</span>    <span class="hljs-number">15</span>.<span class="hljs-number">4562</span>    <span class="hljs-number">1</span>.<span class="hljs-number">9451</span>     <span class="hljs-number">0</span>.<span class="hljs-number">2057</span>    <span class="hljs-number">26</span>.<span class="hljs-number">4951</span>    <span class="hljs-number">22</span>.<span class="hljs-number">1221</span>   <span class="hljs-number">31</span>.<span class="hljs-number">4847</span>    <span class="hljs-number">8</span>.<span class="hljs-number">9640</span> <br><span class="hljs-attribute">26</span>.<span class="hljs-number">2418</span>    <span class="hljs-number">18</span>.<span class="hljs-number">1760</span>    <span class="hljs-number">44</span>.<span class="hljs-number">0356</span>    <span class="hljs-number">13</span>.<span class="hljs-number">5401</span>   <span class="hljs-number">28</span>.<span class="hljs-number">9836</span>    <span class="hljs-number">25</span>.<span class="hljs-number">9879</span>   <span class="hljs-number">38</span>.<span class="hljs-number">4722</span>    <span class="hljs-number">20</span>.<span class="hljs-number">1731</span> <br><span class="hljs-attribute">28</span>.<span class="hljs-number">2694</span>    <span class="hljs-number">29</span>.<span class="hljs-number">0011</span>    <span class="hljs-number">32</span>.<span class="hljs-number">1910</span>    <span class="hljs-number">5</span>.<span class="hljs-number">8699</span>    <span class="hljs-number">36</span>.<span class="hljs-number">4863</span>    <span class="hljs-number">29</span>.<span class="hljs-number">7284</span>   <span class="hljs-number">0</span>.<span class="hljs-number">9718</span>     <span class="hljs-number">28</span>.<span class="hljs-number">1477</span> <br><span class="hljs-attribute">8</span>.<span class="hljs-number">9586</span>     <span class="hljs-number">24</span>.<span class="hljs-number">6635</span>    <span class="hljs-number">16</span>.<span class="hljs-number">5618</span>    <span class="hljs-number">23</span>.<span class="hljs-number">6143</span>   <span class="hljs-number">10</span>.<span class="hljs-number">5597</span>    <span class="hljs-number">15</span>.<span class="hljs-number">1178</span>   <span class="hljs-number">50</span>.<span class="hljs-number">2111</span>    <span class="hljs-number">10</span>.<span class="hljs-number">2944</span> <br><span class="hljs-attribute">8</span>.<span class="hljs-number">1519</span>     <span class="hljs-number">9</span>.<span class="hljs-number">5325</span>     <span class="hljs-number">22</span>.<span class="hljs-number">1075</span>    <span class="hljs-number">18</span>.<span class="hljs-number">5569</span>   <span class="hljs-number">0</span>.<span class="hljs-number">1215</span>     <span class="hljs-number">18</span>.<span class="hljs-number">8726</span>   <span class="hljs-number">48</span>.<span class="hljs-number">2077</span>    <span class="hljs-number">16</span>.<span class="hljs-number">8889</span> <br><span class="hljs-attribute">31</span>.<span class="hljs-number">9499</span>    <span class="hljs-number">17</span>.<span class="hljs-number">6309</span>    <span class="hljs-number">0</span>.<span class="hljs-number">7732</span>     <span class="hljs-number">0</span>.<span class="hljs-number">4656</span>    <span class="hljs-number">47</span>.<span class="hljs-number">4134</span>    <span class="hljs-number">23</span>.<span class="hljs-number">7783</span>   <span class="hljs-number">41</span>.<span class="hljs-number">8671</span>    <span class="hljs-number">3</span>.<span class="hljs-number">5667</span> <br><span class="hljs-attribute">43</span>.<span class="hljs-number">5474</span>    <span class="hljs-number">3</span>.<span class="hljs-number">9061</span>     <span class="hljs-number">53</span>.<span class="hljs-number">3524</span>    <span class="hljs-number">26</span>.<span class="hljs-number">7256</span>   <span class="hljs-number">30</span>.<span class="hljs-number">8165</span>    <span class="hljs-number">13</span>.<span class="hljs-number">4595</span>   <span class="hljs-number">27</span>.<span class="hljs-number">7133</span>    <span class="hljs-number">5</span>.<span class="hljs-number">0706</span> <br><span class="hljs-attribute">23</span>.<span class="hljs-number">9222</span>    <span class="hljs-number">7</span>.<span class="hljs-number">6306</span>     <span class="hljs-number">51</span>.<span class="hljs-number">9612</span>    <span class="hljs-number">22</span>.<span class="hljs-number">8511</span>   <span class="hljs-number">12</span>.<span class="hljs-number">7938</span>    <span class="hljs-number">15</span>.<span class="hljs-number">7307</span>   <span class="hljs-number">4</span>.<span class="hljs-number">9568</span>     <span class="hljs-number">8</span>.<span class="hljs-number">3669</span> <br><span class="hljs-attribute">21</span>.<span class="hljs-number">5051</span>    <span class="hljs-number">24</span>.<span class="hljs-number">0909</span>    <span class="hljs-number">15</span>.<span class="hljs-number">2548</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2111</span>   <span class="hljs-number">6</span>.<span class="hljs-number">2070</span>     <span class="hljs-number">5</span>.<span class="hljs-number">1442</span>    <span class="hljs-number">49</span>.<span class="hljs-number">2430</span>    <span class="hljs-number">16</span>.<span class="hljs-number">7044</span> <br><span class="hljs-attribute">17</span>.<span class="hljs-number">1168</span>    <span class="hljs-number">20</span>.<span class="hljs-number">0354</span>    <span class="hljs-number">34</span>.<span class="hljs-number">1688</span>    <span class="hljs-number">22</span>.<span class="hljs-number">7571</span>   <span class="hljs-number">9</span>.<span class="hljs-number">4402</span>     <span class="hljs-number">3</span>.<span class="hljs-number">9200</span>    <span class="hljs-number">11</span>.<span class="hljs-number">5812</span>    <span class="hljs-number">14</span>.<span class="hljs-number">5677</span> <br><span class="hljs-attribute">52</span>.<span class="hljs-number">1181</span>    <span class="hljs-number">0</span>.<span class="hljs-number">4088</span>     <span class="hljs-number">9</span>.<span class="hljs-number">5559</span>     <span class="hljs-number">11</span>.<span class="hljs-number">4219</span>   <span class="hljs-number">24</span>.<span class="hljs-number">4509</span>    <span class="hljs-number">6</span>.<span class="hljs-number">5634</span>    <span class="hljs-number">26</span>.<span class="hljs-number">7213</span>    <span class="hljs-number">28</span>.<span class="hljs-number">5667</span> <br><span class="hljs-attribute">37</span>.<span class="hljs-number">5848</span>    <span class="hljs-number">16</span>.<span class="hljs-number">8474</span>    <span class="hljs-number">35</span>.<span class="hljs-number">6619</span>    <span class="hljs-number">9</span>.<span class="hljs-number">9333</span>    <span class="hljs-number">24</span>.<span class="hljs-number">4654</span>    <span class="hljs-number">3</span>.<span class="hljs-number">1644</span>    <span class="hljs-number">0</span>.<span class="hljs-number">7775</span>     <span class="hljs-number">6</span>.<span class="hljs-number">9576</span> <br><span class="hljs-attribute">14</span>.<span class="hljs-number">4703</span>    <span class="hljs-number">13</span>.<span class="hljs-number">6368</span>    <span class="hljs-number">19</span>.<span class="hljs-number">8660</span>    <span class="hljs-number">15</span>.<span class="hljs-number">1224</span>   <span class="hljs-number">3</span>.<span class="hljs-number">1616</span>     <span class="hljs-number">4</span>.<span class="hljs-number">2428</span>    <span class="hljs-number">18</span>.<span class="hljs-number">5245</span>    <span class="hljs-number">14</span>.<span class="hljs-number">3598</span> <br><span class="hljs-attribute">58</span>.<span class="hljs-number">6849</span>    <span class="hljs-number">27</span>.<span class="hljs-number">1485</span>    <span class="hljs-number">39</span>.<span class="hljs-number">5168</span>    <span class="hljs-number">16</span>.<span class="hljs-number">9371</span>   <span class="hljs-number">56</span>.<span class="hljs-number">5089</span>    <span class="hljs-number">13</span>.<span class="hljs-number">7090</span>   <span class="hljs-number">52</span>.<span class="hljs-number">5211</span>    <span class="hljs-number">15</span>.<span class="hljs-number">7957</span> <br><span class="hljs-attribute">38</span>.<span class="hljs-number">4300</span>    <span class="hljs-number">8</span>.<span class="hljs-number">4648</span>     <span class="hljs-number">51</span>.<span class="hljs-number">8181</span>    <span class="hljs-number">23</span>.<span class="hljs-number">0159</span>   <span class="hljs-number">8</span>.<span class="hljs-number">9983</span>     <span class="hljs-number">23</span>.<span class="hljs-number">6440</span>   <span class="hljs-number">50</span>.<span class="hljs-number">1156</span>    <span class="hljs-number">23</span>.<span class="hljs-number">7816</span> <br><span class="hljs-attribute">13</span>.<span class="hljs-number">7909</span>    <span class="hljs-number">1</span>.<span class="hljs-number">9510</span>     <span class="hljs-number">34</span>.<span class="hljs-number">0574</span>    <span class="hljs-number">23</span>.<span class="hljs-number">3960</span>   <span class="hljs-number">23</span>.<span class="hljs-number">0624</span>    <span class="hljs-number">8</span>.<span class="hljs-number">4319</span>    <span class="hljs-number">19</span>.<span class="hljs-number">9857</span>    <span class="hljs-number">5</span>.<span class="hljs-number">7902</span> <br><span class="hljs-attribute">40</span>.<span class="hljs-number">8801</span>    <span class="hljs-number">14</span>.<span class="hljs-number">2978</span>    <span class="hljs-number">58</span>.<span class="hljs-number">8289</span>    <span class="hljs-number">14</span>.<span class="hljs-number">5229</span>   <span class="hljs-number">18</span>.<span class="hljs-number">6635</span>    <span class="hljs-number">6</span>.<span class="hljs-number">7436</span>    <span class="hljs-number">52</span>.<span class="hljs-number">8423</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2880</span> <br><span class="hljs-attribute">39</span>.<span class="hljs-number">9494</span>    <span class="hljs-number">29</span>.<span class="hljs-number">5114</span>    <span class="hljs-number">47</span>.<span class="hljs-number">5099</span>    <span class="hljs-number">24</span>.<span class="hljs-number">0664</span>   <span class="hljs-number">10</span>.<span class="hljs-number">1121</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2662</span>   <span class="hljs-number">28</span>.<span class="hljs-number">7812</span>    <span class="hljs-number">27</span>.<span class="hljs-number">6659</span> <br><span class="hljs-attribute">8</span>.<span class="hljs-number">0831</span>     <span class="hljs-number">27</span>.<span class="hljs-number">6705</span>    <span class="hljs-number">9</span>.<span class="hljs-number">1556</span>     <span class="hljs-number">14</span>.<span class="hljs-number">1304</span>   <span class="hljs-number">53</span>.<span class="hljs-number">7989</span>    <span class="hljs-number">0</span>.<span class="hljs-number">2199</span>    <span class="hljs-number">33</span>.<span class="hljs-number">6490</span>    <span class="hljs-number">0</span>.<span class="hljs-number">3980</span> <br><span class="hljs-attribute">1</span>.<span class="hljs-number">3496</span>     <span class="hljs-number">16</span>.<span class="hljs-number">8359</span>    <span class="hljs-number">49</span>.<span class="hljs-number">9816</span>    <span class="hljs-number">6</span>.<span class="hljs-number">0828</span>    <span class="hljs-number">19</span>.<span class="hljs-number">3635</span>    <span class="hljs-number">17</span>.<span class="hljs-number">6622</span>   <span class="hljs-number">36</span>.<span class="hljs-number">9545</span>    <span class="hljs-number">23</span>.<span class="hljs-number">0265</span> <br><span class="hljs-attribute">15</span>.<span class="hljs-number">7320</span>    <span class="hljs-number">19</span>.<span class="hljs-number">5697</span>    <span class="hljs-number">11</span>.<span class="hljs-number">5118</span>    <span class="hljs-number">17</span>.<span class="hljs-number">3884</span>   <span class="hljs-number">44</span>.<span class="hljs-number">0398</span>    <span class="hljs-number">16</span>.<span class="hljs-number">2635</span>   <span class="hljs-number">39</span>.<span class="hljs-number">7139</span>    <span class="hljs-number">28</span>.<span class="hljs-number">4203</span> <br><span class="hljs-attribute">6</span>.<span class="hljs-number">9909</span>     <span class="hljs-number">23</span>.<span class="hljs-number">1804</span>    <span class="hljs-number">38</span>.<span class="hljs-number">3392</span>    <span class="hljs-number">19</span>.<span class="hljs-number">9950</span>   <span class="hljs-number">24</span>.<span class="hljs-number">6543</span>    <span class="hljs-number">19</span>.<span class="hljs-number">6057</span>   <span class="hljs-number">36</span>.<span class="hljs-number">9980</span>    <span class="hljs-number">24</span>.<span class="hljs-number">3992</span> <br><span class="hljs-attribute">4</span>.<span class="hljs-number">1591</span>     <span class="hljs-number">3</span>.<span class="hljs-number">1853</span>     <span class="hljs-number">40</span>.<span class="hljs-number">1400</span>    <span class="hljs-number">20</span>.<span class="hljs-number">3030</span>   <span class="hljs-number">23</span>.<span class="hljs-number">9876</span>    <span class="hljs-number">9</span>.<span class="hljs-number">4030</span>    <span class="hljs-number">41</span>.<span class="hljs-number">1084</span>    <span class="hljs-number">27</span>.<span class="hljs-number">7149</span> <br></code></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用遗传算法解决如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 文件名：example1.m</span><br><span class="hljs-comment">% 时间：2020年9月13日</span><br><span class="hljs-comment">% 来源：https://blog.csdn.net/lishan132/article/details/108563593</span><br><span class="hljs-comment">% 功能：利用遗传算法计算侦察机从基地出发侦查完100个目标耗费的最短时间</span><br>clear,close,clc <br><br><span class="hljs-comment">%数据的读取</span><br>load sj.txt        <span class="hljs-comment">%加载敌方 100 个目标的数据 </span><br>tic <br>x=sj(:,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span>); x=x(:); <br>y=sj(:,<span class="hljs-number">2</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span>); y=y(:); <br>sj=[x y]; d1=[<span class="hljs-number">70</span>,<span class="hljs-number">40</span>];  <br>sj0=[d1;sj;d1]; sj=sj0*<span class="hljs-built_in">pi</span>/<span class="hljs-number">180</span>; <br><br><span class="hljs-comment">%生成距离矩阵</span><br>d=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">102</span>); <span class="hljs-comment">%距离矩阵 d </span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">101</span> <br>     <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>:<span class="hljs-number">102</span> <br>         temp=<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)-sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">1</span>))*<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))*<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>))+<span class="hljs-built_in">sin</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))*<span class="hljs-built_in">sin</span>(sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>)); <br>         d(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">6370</span>*<span class="hljs-built_in">acos</span>(temp); <br>     <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br>d=d+d&#x27;;<br><br><span class="hljs-comment">%设置遗传算法参数</span><br>L=<span class="hljs-number">102</span>;    <span class="hljs-comment">%编码长度，即个体的基因个数</span><br>w=<span class="hljs-number">50</span>;     <span class="hljs-comment">%种群个数，即种群规模</span><br>dai=<span class="hljs-number">100</span>;  <span class="hljs-comment">%进化终止代数，程序迭代运行的上限，保证程序有输出</span><br><br><span class="hljs-comment">%通过改良圈算法选取优良父代 J</span><br><span class="hljs-comment">%选取多条较好的路线，一条路线就是一个个体，多个优良个体构成父代J</span><br>J = <span class="hljs-built_in">zeros</span>(w,L);<br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:w <br>    c=randperm(<span class="hljs-number">100</span>);  <span class="hljs-comment">%随机置换1到100之间的整数</span><br>    c1=[<span class="hljs-number">1</span>,c+<span class="hljs-number">1</span>,<span class="hljs-number">102</span>];   <span class="hljs-comment">%生成一个初始路线</span><br>    flag=<span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">while</span> flag&gt;<span class="hljs-number">0</span> <br>        flag=<span class="hljs-number">0</span>; <br>        <span class="hljs-keyword">for</span> m=<span class="hljs-number">1</span>:L<span class="hljs-number">-3</span><br>            <span class="hljs-keyword">for</span> n=m+<span class="hljs-number">2</span>:L<span class="hljs-number">-1</span> <br>                <span class="hljs-keyword">if</span> d(c1(m),c1(n))+d(c1(m+<span class="hljs-number">1</span>),c1(n+<span class="hljs-number">1</span>))&lt;d(c1(m),c1(m+<span class="hljs-number">1</span>))+d(c1(n),c1(n+<span class="hljs-number">1</span>)) <br>                    flag=<span class="hljs-number">1</span>; <br>                    c1(m+<span class="hljs-number">1</span>:n)=c1(n:<span class="hljs-number">-1</span>:m+<span class="hljs-number">1</span>); <br>                <span class="hljs-keyword">end</span> <br>            <span class="hljs-keyword">end</span> <br>        <span class="hljs-keyword">end</span> <br>    <span class="hljs-keyword">end</span> <br>    J(k,c1)=<span class="hljs-number">1</span>:<span class="hljs-number">102</span>; <br><span class="hljs-keyword">end</span> <br><br><span class="hljs-comment">%十进制编码，由表现型到基因型的映射，并将每个染色体的值转换为[0,1]之间的浮点数</span><br><span class="hljs-comment">%本题中，一个种群有50个个体，每一个个体只有1对染色体，每对染色体有102个基因，且1、102号基因固定</span><br>J=J/<span class="hljs-number">102</span>;    <span class="hljs-comment">%编码操作</span><br>J(:,<span class="hljs-number">1</span>)=<span class="hljs-number">0</span>;<br>J(:,<span class="hljs-number">102</span>)=<span class="hljs-number">1</span>; <br><br><span class="hljs-comment">%遗传算法实现过程 </span><br>A=J;   <span class="hljs-comment">%初始的优良父代A</span><br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:dai   <span class="hljs-comment">%产生 0～1 间随机数列进行编码 </span><br>    B=A; <br>    c=randperm(w);  <span class="hljs-comment">%随机置换1到w之间的整数</span><br>    <span class="hljs-comment">%交配产生子代 B </span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">2</span>:w                 <br>        F=<span class="hljs-number">2</span>+<span class="hljs-built_in">floor</span>(<span class="hljs-number">100</span>*<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">%生成一个2到101之间的整数（选择一个基因）</span><br>        <span class="hljs-comment">%开始和结束的坐标已经确定，1、102号基因固定，只改变其它基因</span><br>        temp=B(c(<span class="hljs-built_in">i</span>),F:<span class="hljs-number">102</span>);   <span class="hljs-comment">%产生交换的基因片段</span><br>        B(c(<span class="hljs-built_in">i</span>),F:<span class="hljs-number">102</span>)=B(c(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>),F:<span class="hljs-number">102</span>);   <span class="hljs-comment">%前后两个体交换基因片段</span><br>        B(c(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>),F:<span class="hljs-number">102</span>)=temp;            <span class="hljs-comment">%前后两个体交换基因片段</span><br>    <span class="hljs-keyword">end</span> <br>    <span class="hljs-comment">%变异产生子代 C </span><br>    by=<span class="hljs-built_in">find</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>,w)&lt;<span class="hljs-number">0.1</span>);     <span class="hljs-comment">%随机产生变异的个体编号</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isempty</span>(by)              <span class="hljs-comment">%没有任何个体发生变异</span><br>         by=<span class="hljs-built_in">floor</span>(w*<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>))+<span class="hljs-number">1</span>; <span class="hljs-comment">%随机选定一个个体发生变异</span><br>    <span class="hljs-keyword">end</span> <br>    C=A(by,:);     <span class="hljs-comment">%变异产生的新个体</span><br>    L3=<span class="hljs-built_in">length</span>(by); <span class="hljs-comment">%变异的个体数目</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:L3 <br>        bw=<span class="hljs-number">2</span>+<span class="hljs-built_in">floor</span>(<span class="hljs-number">100</span>*<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));   <span class="hljs-comment">%产生3个随机数，将染色体基因分成4段</span><br>        bw=<span class="hljs-built_in">sort</span>(bw); <br>        C(<span class="hljs-built_in">j</span>,:)=C(<span class="hljs-built_in">j</span>,[<span class="hljs-number">1</span>:bw(<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>,bw(<span class="hljs-number">2</span>)+<span class="hljs-number">1</span>:bw(<span class="hljs-number">3</span>),bw(<span class="hljs-number">1</span>):bw(<span class="hljs-number">2</span>),bw(<span class="hljs-number">3</span>)+<span class="hljs-number">1</span>:<span class="hljs-number">102</span>]); <span class="hljs-comment">%交换中间两段的基因片段</span><br>    <span class="hljs-keyword">end</span> <br>    G=[A;B;C]; <span class="hljs-comment">%经历一代（复制、交叉、变异）后种群的所有个体</span><br>    TL=<span class="hljs-built_in">size</span>(G,<span class="hljs-number">1</span>);   <span class="hljs-comment">%当前种群的总个数，即经历一代后种群的规模大小</span><br>    <span class="hljs-comment">%在父代和子代中选择优良品种作为新的父代 </span><br>    [~,IX]=<span class="hljs-built_in">sort</span>(G,<span class="hljs-number">2</span>); <span class="hljs-comment">%本题中一种巧妙的解码操作，对每一行（每一个个体）的基因进行升排序，IX为的索引号，即完成解码</span><br>    temp(<span class="hljs-number">1</span>:TL)=<span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:TL <br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">101</span> <br>            <span class="hljs-comment">%计算每个个体的目标函数值（侦查总距离）</span><br>            temp(<span class="hljs-built_in">j</span>)=temp(<span class="hljs-built_in">j</span>)+d(IX(<span class="hljs-built_in">j</span>,<span class="hljs-built_in">i</span>),IX(<span class="hljs-built_in">j</span>,<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)); <br>        <span class="hljs-keyword">end</span> <br>    <span class="hljs-keyword">end</span> <br>    [DZ,IZ]=<span class="hljs-built_in">sort</span>(temp);  <span class="hljs-comment">%按目标函数值递增排序</span><br>    A=G(IZ(<span class="hljs-number">1</span>:w),:);      <span class="hljs-comment">%选取目标函数值较小（适应度值高）的前50个个体，作为下一代的个体</span><br><span class="hljs-keyword">end</span> <br><br><span class="hljs-comment">%生成最佳路径（最佳个体）及距离（目标函数值）</span><br>path=IX(IZ(<span class="hljs-number">1</span>),:);  <span class="hljs-comment">%选择最后一代群体中的最优个体（适应度最高，侦查总距离最小）</span><br>long=DZ(<span class="hljs-number">1</span>);        <span class="hljs-comment">%最优个体的目标函数值（侦查距离）</span><br><br><span class="hljs-comment">%输出结果</span><br>fprintf(<span class="hljs-string">&#x27;侦查耗费总时间:%.2f小时\n&#x27;</span>,long/<span class="hljs-number">1000</span>)<br>toc <br><br><span class="hljs-comment">%绘制坐标图</span><br><span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;bO&#x27;</span>)      <span class="hljs-comment">%目标坐标</span><br><span class="hljs-built_in">hold</span> on<br><span class="hljs-built_in">plot</span>(<span class="hljs-number">70</span>,<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;p&#x27;</span>,...  <span class="hljs-comment">%基地坐标</span><br>    <span class="hljs-string">&#x27;MarkerSize&#x27;</span>,<span class="hljs-number">10</span>,...<br>    <span class="hljs-string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,...<br>    <span class="hljs-string">&#x27;MarkerFaceColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-built_in">hold</span> on<br><span class="hljs-comment">%绘制侦查路线图</span><br>xx=sj0(path,<span class="hljs-number">1</span>);<br>yy=sj0(path,<span class="hljs-number">2</span>); <br><span class="hljs-built_in">plot</span>(xx,yy,<span class="hljs-string">&#x27;-r&#x27;</span>) <br><span class="hljs-comment">%绘图说明</span><br>xlabel(<span class="hljs-string">&quot;经度&quot;</span>)<br>ylabel(<span class="hljs-string">&quot;纬度&quot;</span>)<br>title(<span class="hljs-string">&quot;侦查示意图&quot;</span>)<br><span class="hljs-built_in">legend</span>(<span class="hljs-string">&quot;侦查目标&quot;</span>,<span class="hljs-string">&quot;我方基地&quot;</span>,<span class="hljs-string">&quot;侦查路线&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>遗传算法每次运行的结果都不一样，下面选了一次效果比较好的结果展示 </p><img src="/2025/03/25/matlab-genetic-algorithm/6a1fad6b650520d3bc40c4599e34cbd0.png" class="" title="img"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文根据已有的资料，对遗传算法的Matlab程序进行分析，完善，并添加了相应的注释，给出了解决目标侦查路线问题，其本质也是TSP（Travelling salesman problem）问题的解决过程。</p><p>遗传算法的核心是三种遗传算子（复制、交叉、变异）的遗传策略以及最优个体的选择策略，更改程序中相应的参数，可以解决类似的组合优化问题。</p><p>文中核心代码源自网上资料，名为《数模大全》的第二十三章现代优化算法，但书名、作者均无法考证，但作者做了一些适应性的修改。</p><p>本文程序的特点说明：</p><ol><li>程序中的交叉概率、变异概率均为随机生成，每一次迭代都不一样；</li><li>交叉策略为断点交叉，即选择一个断点，断点右端的染色体全部交换；</li><li>染色体编码方式为浮点数编码；选择最优个体的方式是简单的排序选择，目标函数值越小，适应度值越大；</li><li>程序终止的唯一条件是达到最终迭代次数。</li></ol><p>本文程序后续的改进方向：</p><ol><li>更改交叉概率、变异概率产生的方式，如设置一个不变的常数</li><li>更改编码、解码的方式，如二进制编码</li><li>更改交叉、变异的方式，如单点交叉、两点交叉、多点交叉、均匀交叉、位变异、均匀变异、倒位操作等</li><li>更改选择最优个体的方式，如轮盘赌法、两两竞争法等</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟退火算法的Matlab实现</title>
    <link href="/2025/03/25/matlab-simulated-annealing-algorithm/"/>
    <url>/2025/03/25/matlab-simulated-annealing-algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>我方有一个基地，经度和纬度为（70,40）。假设我方飞机的速度为 1000 公里&#x2F;小时。我方派一架飞机从基地出发，侦察完敌方所有目标，再返回原来的基地。在敌方每一目标点的侦察时间不计，求该架飞机所花费的时间（假设我方飞机巡航时间可以充分长）。 </p><p>已知敌方100 个目标的经度、纬度数据在文件sj.txt中</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">53</span>.<span class="hljs-number">7121</span>    <span class="hljs-number">15</span>.<span class="hljs-number">3046</span>    <span class="hljs-number">51</span>.<span class="hljs-number">1758</span>    <span class="hljs-number">0</span>.<span class="hljs-number">0322</span>    <span class="hljs-number">46</span>.<span class="hljs-number">3253</span>    <span class="hljs-number">28</span>.<span class="hljs-number">2753</span>   <span class="hljs-number">30</span>.<span class="hljs-number">3313</span>    <span class="hljs-number">6</span>.<span class="hljs-number">9348</span> <br><span class="hljs-attribute">56</span>.<span class="hljs-number">5432</span>    <span class="hljs-number">21</span>.<span class="hljs-number">4188</span>    <span class="hljs-number">10</span>.<span class="hljs-number">8198</span>    <span class="hljs-number">16</span>.<span class="hljs-number">2529</span>   <span class="hljs-number">22</span>.<span class="hljs-number">7891</span>    <span class="hljs-number">23</span>.<span class="hljs-number">1045</span>   <span class="hljs-number">10</span>.<span class="hljs-number">1584</span>    <span class="hljs-number">12</span>.<span class="hljs-number">4819</span> <br><span class="hljs-attribute">20</span>.<span class="hljs-number">1050</span>    <span class="hljs-number">15</span>.<span class="hljs-number">4562</span>    <span class="hljs-number">1</span>.<span class="hljs-number">9451</span>     <span class="hljs-number">0</span>.<span class="hljs-number">2057</span>    <span class="hljs-number">26</span>.<span class="hljs-number">4951</span>    <span class="hljs-number">22</span>.<span class="hljs-number">1221</span>   <span class="hljs-number">31</span>.<span class="hljs-number">4847</span>    <span class="hljs-number">8</span>.<span class="hljs-number">9640</span> <br><span class="hljs-attribute">26</span>.<span class="hljs-number">2418</span>    <span class="hljs-number">18</span>.<span class="hljs-number">1760</span>    <span class="hljs-number">44</span>.<span class="hljs-number">0356</span>    <span class="hljs-number">13</span>.<span class="hljs-number">5401</span>   <span class="hljs-number">28</span>.<span class="hljs-number">9836</span>    <span class="hljs-number">25</span>.<span class="hljs-number">9879</span>   <span class="hljs-number">38</span>.<span class="hljs-number">4722</span>    <span class="hljs-number">20</span>.<span class="hljs-number">1731</span> <br><span class="hljs-attribute">28</span>.<span class="hljs-number">2694</span>    <span class="hljs-number">29</span>.<span class="hljs-number">0011</span>    <span class="hljs-number">32</span>.<span class="hljs-number">1910</span>    <span class="hljs-number">5</span>.<span class="hljs-number">8699</span>    <span class="hljs-number">36</span>.<span class="hljs-number">4863</span>    <span class="hljs-number">29</span>.<span class="hljs-number">7284</span>   <span class="hljs-number">0</span>.<span class="hljs-number">9718</span>     <span class="hljs-number">28</span>.<span class="hljs-number">1477</span> <br><span class="hljs-attribute">8</span>.<span class="hljs-number">9586</span>     <span class="hljs-number">24</span>.<span class="hljs-number">6635</span>    <span class="hljs-number">16</span>.<span class="hljs-number">5618</span>    <span class="hljs-number">23</span>.<span class="hljs-number">6143</span>   <span class="hljs-number">10</span>.<span class="hljs-number">5597</span>    <span class="hljs-number">15</span>.<span class="hljs-number">1178</span>   <span class="hljs-number">50</span>.<span class="hljs-number">2111</span>    <span class="hljs-number">10</span>.<span class="hljs-number">2944</span> <br><span class="hljs-attribute">8</span>.<span class="hljs-number">1519</span>     <span class="hljs-number">9</span>.<span class="hljs-number">5325</span>     <span class="hljs-number">22</span>.<span class="hljs-number">1075</span>    <span class="hljs-number">18</span>.<span class="hljs-number">5569</span>   <span class="hljs-number">0</span>.<span class="hljs-number">1215</span>     <span class="hljs-number">18</span>.<span class="hljs-number">8726</span>   <span class="hljs-number">48</span>.<span class="hljs-number">2077</span>    <span class="hljs-number">16</span>.<span class="hljs-number">8889</span> <br><span class="hljs-attribute">31</span>.<span class="hljs-number">9499</span>    <span class="hljs-number">17</span>.<span class="hljs-number">6309</span>    <span class="hljs-number">0</span>.<span class="hljs-number">7732</span>     <span class="hljs-number">0</span>.<span class="hljs-number">4656</span>    <span class="hljs-number">47</span>.<span class="hljs-number">4134</span>    <span class="hljs-number">23</span>.<span class="hljs-number">7783</span>   <span class="hljs-number">41</span>.<span class="hljs-number">8671</span>    <span class="hljs-number">3</span>.<span class="hljs-number">5667</span> <br><span class="hljs-attribute">43</span>.<span class="hljs-number">5474</span>    <span class="hljs-number">3</span>.<span class="hljs-number">9061</span>     <span class="hljs-number">53</span>.<span class="hljs-number">3524</span>    <span class="hljs-number">26</span>.<span class="hljs-number">7256</span>   <span class="hljs-number">30</span>.<span class="hljs-number">8165</span>    <span class="hljs-number">13</span>.<span class="hljs-number">4595</span>   <span class="hljs-number">27</span>.<span class="hljs-number">7133</span>    <span class="hljs-number">5</span>.<span class="hljs-number">0706</span> <br><span class="hljs-attribute">23</span>.<span class="hljs-number">9222</span>    <span class="hljs-number">7</span>.<span class="hljs-number">6306</span>     <span class="hljs-number">51</span>.<span class="hljs-number">9612</span>    <span class="hljs-number">22</span>.<span class="hljs-number">8511</span>   <span class="hljs-number">12</span>.<span class="hljs-number">7938</span>    <span class="hljs-number">15</span>.<span class="hljs-number">7307</span>   <span class="hljs-number">4</span>.<span class="hljs-number">9568</span>     <span class="hljs-number">8</span>.<span class="hljs-number">3669</span> <br><span class="hljs-attribute">21</span>.<span class="hljs-number">5051</span>    <span class="hljs-number">24</span>.<span class="hljs-number">0909</span>    <span class="hljs-number">15</span>.<span class="hljs-number">2548</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2111</span>   <span class="hljs-number">6</span>.<span class="hljs-number">2070</span>     <span class="hljs-number">5</span>.<span class="hljs-number">1442</span>    <span class="hljs-number">49</span>.<span class="hljs-number">2430</span>    <span class="hljs-number">16</span>.<span class="hljs-number">7044</span> <br><span class="hljs-attribute">17</span>.<span class="hljs-number">1168</span>    <span class="hljs-number">20</span>.<span class="hljs-number">0354</span>    <span class="hljs-number">34</span>.<span class="hljs-number">1688</span>    <span class="hljs-number">22</span>.<span class="hljs-number">7571</span>   <span class="hljs-number">9</span>.<span class="hljs-number">4402</span>     <span class="hljs-number">3</span>.<span class="hljs-number">9200</span>    <span class="hljs-number">11</span>.<span class="hljs-number">5812</span>    <span class="hljs-number">14</span>.<span class="hljs-number">5677</span> <br><span class="hljs-attribute">52</span>.<span class="hljs-number">1181</span>    <span class="hljs-number">0</span>.<span class="hljs-number">4088</span>     <span class="hljs-number">9</span>.<span class="hljs-number">5559</span>     <span class="hljs-number">11</span>.<span class="hljs-number">4219</span>   <span class="hljs-number">24</span>.<span class="hljs-number">4509</span>    <span class="hljs-number">6</span>.<span class="hljs-number">5634</span>    <span class="hljs-number">26</span>.<span class="hljs-number">7213</span>    <span class="hljs-number">28</span>.<span class="hljs-number">5667</span> <br><span class="hljs-attribute">37</span>.<span class="hljs-number">5848</span>    <span class="hljs-number">16</span>.<span class="hljs-number">8474</span>    <span class="hljs-number">35</span>.<span class="hljs-number">6619</span>    <span class="hljs-number">9</span>.<span class="hljs-number">9333</span>    <span class="hljs-number">24</span>.<span class="hljs-number">4654</span>    <span class="hljs-number">3</span>.<span class="hljs-number">1644</span>    <span class="hljs-number">0</span>.<span class="hljs-number">7775</span>     <span class="hljs-number">6</span>.<span class="hljs-number">9576</span> <br><span class="hljs-attribute">14</span>.<span class="hljs-number">4703</span>    <span class="hljs-number">13</span>.<span class="hljs-number">6368</span>    <span class="hljs-number">19</span>.<span class="hljs-number">8660</span>    <span class="hljs-number">15</span>.<span class="hljs-number">1224</span>   <span class="hljs-number">3</span>.<span class="hljs-number">1616</span>     <span class="hljs-number">4</span>.<span class="hljs-number">2428</span>    <span class="hljs-number">18</span>.<span class="hljs-number">5245</span>    <span class="hljs-number">14</span>.<span class="hljs-number">3598</span> <br><span class="hljs-attribute">58</span>.<span class="hljs-number">6849</span>    <span class="hljs-number">27</span>.<span class="hljs-number">1485</span>    <span class="hljs-number">39</span>.<span class="hljs-number">5168</span>    <span class="hljs-number">16</span>.<span class="hljs-number">9371</span>   <span class="hljs-number">56</span>.<span class="hljs-number">5089</span>    <span class="hljs-number">13</span>.<span class="hljs-number">7090</span>   <span class="hljs-number">52</span>.<span class="hljs-number">5211</span>    <span class="hljs-number">15</span>.<span class="hljs-number">7957</span> <br><span class="hljs-attribute">38</span>.<span class="hljs-number">4300</span>    <span class="hljs-number">8</span>.<span class="hljs-number">4648</span>     <span class="hljs-number">51</span>.<span class="hljs-number">8181</span>    <span class="hljs-number">23</span>.<span class="hljs-number">0159</span>   <span class="hljs-number">8</span>.<span class="hljs-number">9983</span>     <span class="hljs-number">23</span>.<span class="hljs-number">6440</span>   <span class="hljs-number">50</span>.<span class="hljs-number">1156</span>    <span class="hljs-number">23</span>.<span class="hljs-number">7816</span> <br><span class="hljs-attribute">13</span>.<span class="hljs-number">7909</span>    <span class="hljs-number">1</span>.<span class="hljs-number">9510</span>     <span class="hljs-number">34</span>.<span class="hljs-number">0574</span>    <span class="hljs-number">23</span>.<span class="hljs-number">3960</span>   <span class="hljs-number">23</span>.<span class="hljs-number">0624</span>    <span class="hljs-number">8</span>.<span class="hljs-number">4319</span>    <span class="hljs-number">19</span>.<span class="hljs-number">9857</span>    <span class="hljs-number">5</span>.<span class="hljs-number">7902</span> <br><span class="hljs-attribute">40</span>.<span class="hljs-number">8801</span>    <span class="hljs-number">14</span>.<span class="hljs-number">2978</span>    <span class="hljs-number">58</span>.<span class="hljs-number">8289</span>    <span class="hljs-number">14</span>.<span class="hljs-number">5229</span>   <span class="hljs-number">18</span>.<span class="hljs-number">6635</span>    <span class="hljs-number">6</span>.<span class="hljs-number">7436</span>    <span class="hljs-number">52</span>.<span class="hljs-number">8423</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2880</span> <br><span class="hljs-attribute">39</span>.<span class="hljs-number">9494</span>    <span class="hljs-number">29</span>.<span class="hljs-number">5114</span>    <span class="hljs-number">47</span>.<span class="hljs-number">5099</span>    <span class="hljs-number">24</span>.<span class="hljs-number">0664</span>   <span class="hljs-number">10</span>.<span class="hljs-number">1121</span>    <span class="hljs-number">27</span>.<span class="hljs-number">2662</span>   <span class="hljs-number">28</span>.<span class="hljs-number">7812</span>    <span class="hljs-number">27</span>.<span class="hljs-number">6659</span> <br><span class="hljs-attribute">8</span>.<span class="hljs-number">0831</span>     <span class="hljs-number">27</span>.<span class="hljs-number">6705</span>    <span class="hljs-number">9</span>.<span class="hljs-number">1556</span>     <span class="hljs-number">14</span>.<span class="hljs-number">1304</span>   <span class="hljs-number">53</span>.<span class="hljs-number">7989</span>    <span class="hljs-number">0</span>.<span class="hljs-number">2199</span>    <span class="hljs-number">33</span>.<span class="hljs-number">6490</span>    <span class="hljs-number">0</span>.<span class="hljs-number">3980</span> <br><span class="hljs-attribute">1</span>.<span class="hljs-number">3496</span>     <span class="hljs-number">16</span>.<span class="hljs-number">8359</span>    <span class="hljs-number">49</span>.<span class="hljs-number">9816</span>    <span class="hljs-number">6</span>.<span class="hljs-number">0828</span>    <span class="hljs-number">19</span>.<span class="hljs-number">3635</span>    <span class="hljs-number">17</span>.<span class="hljs-number">6622</span>   <span class="hljs-number">36</span>.<span class="hljs-number">9545</span>    <span class="hljs-number">23</span>.<span class="hljs-number">0265</span> <br><span class="hljs-attribute">15</span>.<span class="hljs-number">7320</span>    <span class="hljs-number">19</span>.<span class="hljs-number">5697</span>    <span class="hljs-number">11</span>.<span class="hljs-number">5118</span>    <span class="hljs-number">17</span>.<span class="hljs-number">3884</span>   <span class="hljs-number">44</span>.<span class="hljs-number">0398</span>    <span class="hljs-number">16</span>.<span class="hljs-number">2635</span>   <span class="hljs-number">39</span>.<span class="hljs-number">7139</span>    <span class="hljs-number">28</span>.<span class="hljs-number">4203</span> <br><span class="hljs-attribute">6</span>.<span class="hljs-number">9909</span>     <span class="hljs-number">23</span>.<span class="hljs-number">1804</span>    <span class="hljs-number">38</span>.<span class="hljs-number">3392</span>    <span class="hljs-number">19</span>.<span class="hljs-number">9950</span>   <span class="hljs-number">24</span>.<span class="hljs-number">6543</span>    <span class="hljs-number">19</span>.<span class="hljs-number">6057</span>   <span class="hljs-number">36</span>.<span class="hljs-number">9980</span>    <span class="hljs-number">24</span>.<span class="hljs-number">3992</span> <br><span class="hljs-attribute">4</span>.<span class="hljs-number">1591</span>     <span class="hljs-number">3</span>.<span class="hljs-number">1853</span>     <span class="hljs-number">40</span>.<span class="hljs-number">1400</span>    <span class="hljs-number">20</span>.<span class="hljs-number">3030</span>   <span class="hljs-number">23</span>.<span class="hljs-number">9876</span>    <span class="hljs-number">9</span>.<span class="hljs-number">4030</span>    <span class="hljs-number">41</span>.<span class="hljs-number">1084</span>    <span class="hljs-number">27</span>.<span class="hljs-number">7149</span> <br></code></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>使用模拟退火算法解决如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 文件名：example1.m</span><br><span class="hljs-comment">% 时间：2020年9月13日</span><br><span class="hljs-comment">% 来源：https://blog.csdn.net/lishan132/article/details/108559016</span><br><span class="hljs-comment">% 功能：利用模拟退火算法计算侦察机从基地出发侦查完100个目标耗费的最短时间</span><br>clc,close,clear <br><br><span class="hljs-comment">%数据的读取</span><br>load sj.txt     <span class="hljs-comment">%加载敌方 100 个目标的数据，数据按照表格中的位置保存在纯文本文件 sj.txt 中 </span><br>tic<br>x=sj(:,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span>);x=x(:); <br>y=sj(:,<span class="hljs-number">2</span>:<span class="hljs-number">2</span>:<span class="hljs-number">8</span>);y=y(:); <br>sj=[x y]; d1=[<span class="hljs-number">70</span>,<span class="hljs-number">40</span>];  <br>sj=[d1;sj;d1]; sj=sj*<span class="hljs-built_in">pi</span>/<span class="hljs-number">180</span>; <br><br><span class="hljs-comment">%%生成距离矩阵</span><br>d=<span class="hljs-built_in">zeros</span>(<span class="hljs-number">102</span>); <br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">101</span> <br>     <span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>:<span class="hljs-number">102</span> <br>         temp=<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">1</span>)-sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">1</span>))*<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))*<span class="hljs-built_in">cos</span>(sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>))+<span class="hljs-built_in">sin</span>(sj(<span class="hljs-built_in">i</span>,<span class="hljs-number">2</span>))*<span class="hljs-built_in">sin</span>(sj(<span class="hljs-built_in">j</span>,<span class="hljs-number">2</span>)); <br>         d(<span class="hljs-built_in">i</span>,<span class="hljs-built_in">j</span>)=<span class="hljs-number">6370</span>*<span class="hljs-built_in">acos</span>(temp); <br>     <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br>d=d+d&#x27;;   <br><br><span class="hljs-comment">%初始化决策变量和函数值，即模拟退火中的状态和内能</span><br>S0=[];    <span class="hljs-comment">%初始化路线，决策变量，即状态</span><br>Sum=<span class="hljs-built_in">inf</span>;  <span class="hljs-comment">%初始化侦查距离，目标函数值</span><br><br><span class="hljs-comment">%生成初始解，用蒙特卡洛方法随机生成一个较好的路线组合</span><br><span class="hljs-comment">%100个目标点，理论上有100!=9.3326e+157种组合，此问题属于NP难题</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">j</span>=<span class="hljs-number">1</span>:<span class="hljs-number">1000</span>   <br>     S=[<span class="hljs-number">1</span> <span class="hljs-number">1</span>+randperm(<span class="hljs-number">100</span>),<span class="hljs-number">102</span>]; <br>     temp=<span class="hljs-number">0</span>; <br>     <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span>=<span class="hljs-number">1</span>:<span class="hljs-number">101</span> <br>         temp=temp+d(S(<span class="hljs-built_in">i</span>),S(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)); <br>     <span class="hljs-keyword">end</span> <br>     <span class="hljs-keyword">if</span> temp&lt;Sum <br>         S0=S;<br>         Sum=temp; <br>     <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span> <br><br><span class="hljs-comment">%模拟退火算法的参数设置</span><br>e=<span class="hljs-number">0.1</span>^<span class="hljs-number">30</span>; <span class="hljs-comment">%终止温度</span><br>L=<span class="hljs-number">50000</span>;  <span class="hljs-comment">%Markov链长度</span><br>at=<span class="hljs-number">0.999</span>; <span class="hljs-comment">%温度衰减因子</span><br>T=<span class="hljs-number">1</span>;      <span class="hljs-comment">%起始温度</span><br><br><span class="hljs-comment">%退火过程 </span><br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:L <br>    <span class="hljs-comment">%两交换法产生新解 </span><br>    c=<span class="hljs-number">2</span>+<span class="hljs-built_in">floor</span>(<span class="hljs-number">100</span>*<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">%随机生成2个整数，范围[2,101] </span><br>    c=<span class="hljs-built_in">sort</span>(c);  <span class="hljs-comment">%从小到大排序</span><br>    c1=c(<span class="hljs-number">1</span>);<br>    c2=c(<span class="hljs-number">2</span>); <br>    <span class="hljs-comment">%交换两个点之间的访问顺序，计算代价函数值，即当前时刻目标值（内能）减去前一时刻目标值（内能） </span><br>    <span class="hljs-comment">%交换如下（本示例中侦查目标坐标编号为2,3,4....101）：</span><br>    <span class="hljs-comment">%交换前访问顺序：...-5-6-31-  c1-21-12-52-c2  -87-63-....</span><br>    <span class="hljs-comment">%交换后访问顺序：...-5-6-31-  c2-52-12-21-c1  -87-63-....</span><br>    d1 = d(S0(c1<span class="hljs-number">-1</span>),S0(c1))+d(S0(c2),S0(c2+<span class="hljs-number">1</span>)); <span class="hljs-comment">%交换前，31-c1距离加上c2-87的距离</span><br>    d2 = d(S0(c1<span class="hljs-number">-1</span>),S0(c2))+d(S0(c1),S0(c2+<span class="hljs-number">1</span>)); <span class="hljs-comment">%交换后，31-c2距离加上c1-87的距离</span><br>    df = d2-d1; <br>    <span class="hljs-comment">%接受准则 </span><br>    <span class="hljs-keyword">if</span> df&lt;<span class="hljs-number">0</span>  <span class="hljs-comment">%内能降低，此解与上一解比较更优</span><br>        S0=[S0(<span class="hljs-number">1</span>:c1<span class="hljs-number">-1</span>),S0(c2:<span class="hljs-number">-1</span>:c1),S0(c2+<span class="hljs-number">1</span>:<span class="hljs-number">102</span>)];       <br>        Sum=Sum+df; <br>    <span class="hljs-keyword">elseif</span> <span class="hljs-built_in">exp</span>(-df/T)&gt;<span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>)  <span class="hljs-comment">%内能增大，此解与上一解比较更差，以玻尔兹曼概率接受此解</span><br>        S0=[S0(<span class="hljs-number">1</span>:c1<span class="hljs-number">-1</span>),S0(c2:<span class="hljs-number">-1</span>:c1),S0(c2+<span class="hljs-number">1</span>:<span class="hljs-number">102</span>)]; <br>        Sum=Sum+df; <br>    <span class="hljs-keyword">end</span> <br>    T=T*at;  <span class="hljs-comment">%降低温度，开始冷却</span><br>    <span class="hljs-keyword">if</span> T&lt;e   <span class="hljs-comment">%温度小于临界值，算法提前结束</span><br>        <span class="hljs-keyword">break</span>; <br>    <span class="hljs-keyword">end</span> <br><span class="hljs-keyword">end</span><br>toc<br><span class="hljs-comment">%输出结果</span><br>fprintf(<span class="hljs-string">&#x27;侦查耗费总时间:%.2f小时\n&#x27;</span>,Sum/<span class="hljs-number">1000</span>)<br><br><span class="hljs-comment">%绘制坐标图</span><br> <span class="hljs-built_in">plot</span>(x,y,<span class="hljs-string">&#x27;bO&#x27;</span>)      <span class="hljs-comment">%目标坐标</span><br> <span class="hljs-built_in">hold</span> on<br> <span class="hljs-built_in">plot</span>(<span class="hljs-number">70</span>,<span class="hljs-number">40</span>,<span class="hljs-string">&#x27;p&#x27;</span>,...  <span class="hljs-comment">%基地坐标</span><br>    <span class="hljs-string">&#x27;MarkerSize&#x27;</span>,<span class="hljs-number">10</span>,...<br>    <span class="hljs-string">&#x27;MarkerEdgeColor&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,...<br>    <span class="hljs-string">&#x27;MarkerFaceColor&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br> <span class="hljs-built_in">hold</span> on<br> <span class="hljs-comment">%绘制侦查路线图</span><br> <span class="hljs-built_in">plot</span>([x(S0(<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>),<span class="hljs-number">70</span>,x(S0(<span class="hljs-number">101</span>)<span class="hljs-number">-1</span>)],[y(S0(<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>),<span class="hljs-number">40</span>,y(S0(<span class="hljs-number">101</span>)<span class="hljs-number">-1</span>)],<span class="hljs-string">&#x27;-r&#x27;</span>)<br> <span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">99</span><br>    <span class="hljs-built_in">plot</span>([x(S0(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>),x(S0(<span class="hljs-built_in">i</span>+<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>)],[y(S0(<span class="hljs-built_in">i</span>+<span class="hljs-number">1</span>)<span class="hljs-number">-1</span>),y(S0(<span class="hljs-built_in">i</span>+<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>)],<span class="hljs-string">&#x27;-r&#x27;</span>) <br> <span class="hljs-keyword">end</span><br> <span class="hljs-comment">%绘图说明</span><br> xlabel(<span class="hljs-string">&quot;经度&quot;</span>)<br> ylabel(<span class="hljs-string">&quot;纬度&quot;</span>)<br> title(<span class="hljs-string">&quot;侦查示意图&quot;</span>)<br> <span class="hljs-built_in">legend</span>(<span class="hljs-string">&quot;侦查目标&quot;</span>,<span class="hljs-string">&quot;我方基地&quot;</span>,<span class="hljs-string">&quot;侦查路线&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>退火算法每次运行的结果都不一样，下面选了一次效果比较好的结果展示 </p><img src="/2025/03/25/matlab-simulated-annealing-algorithm/6f4bbe9503846fe1ca8654ace00a137f.png" class="" title="6f4bbe9503846fe1ca8654ace00a137f"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文根据已有的资料，对模拟算法的Matlab程序进行分析，完善，并添加了相应的注释，给出了解决目标侦查路线问题，其本质也是TSP（Travelling salesman problem）问题的解决过程。</p><p>模拟退火的核心是构造新解的方法、以及设计接受新解的策略，通过设置温度参数可以控制模拟退火算法的运行过程。</p><p>文中核心代码源自网上资料，名为《数模大全》的第二十三章现代优化算法，但书名、作者均无法考证，但作者做了一些适应性的修改。</p>]]></content>
    
    
    <categories>
      
      <category>算法实现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>嵌入式学习指南参考</title>
    <link href="/2025/03/15/embedded-learning-reference/"/>
    <url>/2025/03/15/embedded-learning-reference/</url>
    
    <content type="html"><![CDATA[<h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h2><p>    1.1 C语言（数据类型、关键字、注释、操作语句、基本语法、数组、函数、一级指针、结构体、枚举体）<br>    1.2 基本电路知识（认识电阻、电容、电感、二极管、三极管、继电器等基本元器件以及在电路图中的表示）<br>    1.3 单片机开发知识（GPIO、LED、串口、中断、AD&#x2F;DA、时钟、LCD显示器、存储器等）<br>    1.4 掌握Keil等工具的使用，会使用一款8位单片机（常用STC89C52）进行简单的裸机开发（无操作系统）</p><h2 id="2-初阶"><a href="#2-初阶" class="headerlink" title="2 初阶"></a>2 初阶</h2><p>    2.1 C语言（链表、内存操作、递归函数、共用体、文件操作等）<br>    2.2 数字电路、模拟电路，这两门了解即可，不用深入，主要是为了能看懂简单的芯片数据手册datasheet<br>    2.3 单片机开发知识（电机、红外、Wi-Fi、蓝牙、以太网、HDMI、USB、DMA等）<br>    2.4 会使用一款32位单片机（常用STM32F103）进行简单的裸机开发（无操作系统）<br>    2.5 学会Linux操作系统的使用（例如：Ubuntu操作系统）<br>    2.6 掌握git、gcc、gdb、make等开发工具的使用    </p><h2 id="3-进阶"><a href="#3-进阶" class="headerlink" title="3 进阶"></a>3 进阶</h2><p>    3.1 C语言（头文件、预处理、条件编译、位域、可变参数函数、命令行参数函数、排序算法、查找算法等等）<br>    3.2 数据结构与算法<br>    3.3 单片机开发知识（IIC总线、SPI总线、CAN总线、OneWire总线等）<br>    3.4 操作系统原理、数据库相关知识<br>    3.5 学会RTOS操作系统系统下的嵌入式开发（例如：FreeRTOS）<br>    3.6 会使用Vscode、SourceInsight等代码阅读工具</p><h2 id="4-高阶"><a href="#4-高阶" class="headerlink" title="4 高阶"></a>4 高阶</h2><p>    4.1 学习Linux操作系统下的嵌入式开发<br>    4.2 学会使用汇编&#x2F;C++&#x2F;Python&#x2F;java等其它语言<br>    4.3 学习网络通信协议，例如TCP&#x2F;IP&#x2F;HTTP&#x2F;MQTT等<br>    4.4 学习图形界面程序的开发，例如PC端的Qt、C#、MFC等，手机端的Android、ios等应用开发<br>    4.5 根据岗位要求再深入学习相关知识，例如FPGA、DSP、视频编解码、图像处理等等    </p><p>推荐学习资料，仅供参考：<br>1、哔哩哔哩，直接搜索嵌入开发，寻找相关视频<br>2、正点原子：<a href="http://www.alientek.com/">http://www.alientek.com/</a><br>3、野火：<a href="https://embedfire.com/">https://embedfire.com/</a><br>4、韦东山：<a href="https://www.100ask.net/">https://www.100ask.net/</a><br>5、朱友鹏：<a href="https://t.elecfans.com/topic/133.html">https://t.elecfans.com/topic/133.html</a><br>5、华清远见：<a href="http://www.hqyj.com/courses/embai.html">http://www.hqyj.com/courses/embai.html</a></p><p>以上内容，纯属个人意见，如有谬误，欢迎交流</p>]]></content>
    
    
    <categories>
      
      <category>经验之谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c/c++开发时的一些实用VsCode插件</title>
    <link href="/2025/03/15/vscode-plug/"/>
    <url>/2025/03/15/vscode-plug/</url>
    
    <content type="html"><![CDATA[<p>要求：为了提高使用vscode开发的效率，推荐几款实用插件。</p><p>Name: <strong>Align Spaces</strong><br>Description: Align operators without modifying the code（在不修改代码的情况下对齐操作符）</p><p>Name: <strong>Better Comments</strong><br>Description: Improve your code commenting by annotating with alert, informational, TODOs, and more!（通过添加alert、informational、todo等注释来改进代码注释!）</p><p>Name: <strong>C&#x2F;C++</strong><br>Description: C&#x2F;C++ IntelliSense, debugging, and code browsing.</p><p>Name: <strong>C&#x2F;C++ Extension Pack</strong><br>Description: Popular extensions for C++ development in Visual Studio Code.</p><p>Name: <strong>C&#x2F;C++ MATH Formula Viewer</strong><br>Description: hovers math formula of c mathematical library functions</p><p>Name: <strong>C&#x2F;C++ Themes</strong><br>Description: UI Themes for C&#x2F;C++ extension.</p><p>Name: <strong>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</strong><br>Description: Language pack extension for Chinese (Simplified)</p><p>Name: <strong>Code Runner</strong><br>Description: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, </p><p>Name: <strong>CodeSnap</strong><br>Description: 📷 Take beautiful screenshots of your code</p><p>Name: <strong>Comment Translate</strong><br>Description: This plugin uses the Google Translate API to translate comments for the VSCode programming language.</p><p>Name: <strong>Community Material Theme</strong><br>Description: The official community maintained Material Theme with ‘legacy’ color schemes you love!</p><p>Name: <strong>Error Lens</strong><br>Description: Improve highlighting of errors, warnings and other language diagnostics.</p><p>Name: <strong>Git Graph</strong><br>Description: View a Git Graph of your repository, and perform Git actions from the graph.</p><p>Name: <strong>Indenticator</strong><br>Description: Highlights your current indent depth（突出显示当前缩进深度）</p><p>Name: <strong>Material Theme Icons</strong><br>Description: Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.</p><p>Name: <strong>Trailing Spaces</strong><br>Description: Highlight trailing spaces and delete them in a flash!（突出显示拖尾空格，并在flash中删除它们!）</p><p>Name: <strong>Material Theme</strong><br>Description: The most epic theme now for Visual Studio Code</p><p>Name: <strong>VS Code Counter</strong><br>Description: Count lines of code in many programming languages.（计算许多编程语言中的代码行数）</p><p>Name: <strong>clangd</strong><br>Description: C&#x2F;C++ completion, navigation, and insights</p>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python发送一些自定义的wifi帧</title>
    <link href="/2025/03/15/python-wifi-mac-frame/"/>
    <url>/2025/03/15/python-wifi-mac-frame/</url>
    
    <content type="html"><![CDATA[<p>要求：为了通过python编程发送mac帧测试wifi模块是否正常工作，特编写此程序，可以用于模拟多种压力测试场景。</p><p>前提：需要有一个支持监控模式的网卡，并在Linux操作系统下运行该程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># note: precondition:</span><br><span class="hljs-comment"># sudo apt-get upgrade -y &amp;&amp; apt-get update -y</span><br><span class="hljs-comment"># sudo apt-get install python3-pip aircrack-ng -y</span><br><span class="hljs-comment"># pip install scapy</span><br><span class="hljs-comment"># 1. Verify that the network card supporting monitor mode: iwconfig</span><br><span class="hljs-comment"># 2. nable monitor mode of wlan0: airmon-ng start wlan0</span><br><span class="hljs-comment"># 3. Set the channel of wlan0mon: iwconfig wlan0mon channel &lt;channel_number&gt;</span><br><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>wifi_mac_frame = RadioTap() / Dot11() / Raw()  <span class="hljs-comment"># blank wifi mac frame</span><br><br><span class="hljs-comment"># frame header</span><br>wifi_mac_frame.<span class="hljs-built_in">type</span> = <span class="hljs-number">0</span>  <span class="hljs-comment"># management</span><br>wifi_mac_frame.subtype = <span class="hljs-number">13</span>  <span class="hljs-comment"># action</span><br>wifi_mac_frame.proto = <span class="hljs-number">0</span>  <span class="hljs-comment"># protect</span><br>wifi_mac_frame.FCfield = <span class="hljs-string">&quot;retry&quot;</span> <span class="hljs-comment"># retry</span><br>wifi_mac_frame.ID = <span class="hljs-number">14849</span>  <span class="hljs-comment"># duration</span><br>wifi_mac_frame.addr1 = <span class="hljs-string">&quot;FF:FF:FF:FF:FF:FF&quot;</span>  <span class="hljs-comment"># broadcast address</span><br>wifi_mac_frame.addr2 = <span class="hljs-string">&quot;02:3B:42:E1:FC:55&quot;</span>  <span class="hljs-comment"># source address</span><br>wifi_mac_frame.addr3 = <span class="hljs-string">&quot;02:3B:42:E1:FC:55&quot;</span>  <span class="hljs-comment"># bssid</span><br>wifi_mac_frame.SC = <span class="hljs-number">48</span>  <span class="hljs-comment"># sequence number</span><br><br><span class="hljs-comment"># frame body</span><br>hex_value = <span class="hljs-string">&#x27;042243000290fad602000000640043ef3d3d&#x27;</span>  <span class="hljs-comment"># FILS Discover Frame</span><br>wifi_mac_frame.load = <span class="hljs-built_in">bytes</span>.fromhex(hex_value)  <span class="hljs-comment"># payload</span><br><br>wifi_mac_frame.show()  <span class="hljs-comment"># show frame</span><br><br>sendp(wifi_mac_frame, iface=<span class="hljs-string">&quot;wlan0mon&quot;</span>, count=<span class="hljs-number">10000</span>)  <span class="hljs-comment"># send 10000 times</span><br><br></code></pre></td></tr></table></figure><p>使用说明：</p><p>1、需要将代码中的addr1和addr2替换成目标AP热点的mac地址 </p><p>2、修改type和subtype的值可以构造不同类型的帧</p><p>3、sendp函数中的count参数表示发送帧的次数</p><p>特别注意：本程序只用于学习，不可用于违法目的，亦不可攻击他人正常工作的AP热点</p>]]></content>
    
    
    <categories>
      
      <category>脚本程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自己动手编译一个OpenWrt操作系统</title>
    <link href="/2025/03/14/openwrt-basic-operation/"/>
    <url>/2025/03/14/openwrt-basic-operation/</url>
    
    <content type="html"><![CDATA[<p>要求：下载openwrt源码，编译，打包固件。</p><h2 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1 下载源码"></a>1 下载源码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/openwrt/openwrt.git<br>cd openwrt<br></code></pre></td></tr></table></figure><h2 id="2-更新feeds"><a href="#2-更新feeds" class="headerlink" title="2 更新feeds"></a>2 更新feeds</h2><p>首次编译前，需要更新feeds，否则编译时会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./scripts/feeds update -a         // 更新feeds包<br>./scripts/feeds install -a        // 安装feeds包进入OpenWrt系统中<br></code></pre></td></tr></table></figure><h2 id="3-配置openwrt"><a href="#3-配置openwrt" class="headerlink" title="3 配置openwrt"></a>3 配置openwrt</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make menuconfig<br></code></pre></td></tr></table></figure><p>例如作者手上有一款Linksys E8450的路由器，相关信息见：<a href="https://openwrt.org/toh/linksys/e8450">https://openwrt.org/toh/linksys/e8450</a></p><p>现在希望给该路由器刷OpenWrt系统，在配置界面设置的信息如下</p><img src="/2025/03/14/openwrt-basic-operation/image-20250325160146350.png" class="" title="image-20250325160146350"><h2 id="4-编译固件"><a href="#4-编译固件" class="headerlink" title="4 编译固件"></a>4 编译固件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make V=s                      // 开始编译固件<br></code></pre></td></tr></table></figure><h2 id="5-打包固件"><a href="#5-打包固件" class="headerlink" title="5 打包固件"></a>5 打包固件</h2><p>编译完成后，在<code>bin/targets/</code>目录下可以看到生成的固件。</p><p>通过上述步骤，你可以成功地在本地环境中构建自己的OpenWrt固件。</p>]]></content>
    
    
    <categories>
      
      <category>OpenWrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python快速搭建一个https服务器</title>
    <link href="/2025/03/13/python-https-server/"/>
    <url>/2025/03/13/python-https-server/</url>
    
    <content type="html"><![CDATA[<p>要求：在一台连接到网络的主机上搭建https服务器，假设该主机的ip地址为：10.98.69.174。</p><h2 id="1-创建证书"><a href="#1-创建证书" class="headerlink" title="1 创建证书"></a>1 创建证书</h2><p>创建证书example.crt和私钥example.key，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -newkey rsa:2048 -nodes -keyout example.key -x509 -days 365 -out example.crt<br></code></pre></td></tr></table></figure><p>使用命令可以查看证书详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in example.crt -text -noout<br></code></pre></td></tr></table></figure><h2 id="2-创建服务器脚本"><a href="#2-创建服务器脚本" class="headerlink" title="2 创建服务器脚本"></a>2 创建服务器脚本</h2><p>使用python编辑脚本文件https_server.py，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> HTTPServer, BaseHTTPRequestHandler<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRequestHandler</span>(<span class="hljs-title class_ inherited__">BaseHTTPRequestHandler</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># self.log_message(&#x27;%s&#x27;, &quot;do_GET&quot;)</span><br>        self.send_response(<span class="hljs-number">200</span>)<br>        self.send_header(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        self.end_headers()<br>        self.wfile.write(<span class="hljs-built_in">bytes</span>(json.dumps(&#123;<span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)<br>    context.load_cert_chain(certfile=<span class="hljs-string">&#x27;./example.crt&#x27;</span>, keyfile=<span class="hljs-string">&quot;./example.key&quot;</span>)<br><br>    ciphers = <span class="hljs-string">&quot;&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-ECDSA-CHACHA20-POLY1305:&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-RSA-CHACHA20-POLY1305:&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-RSA-AES128-GCM-SHA256:&quot;</span><br>    context.set_ciphers(ciphers)<br><br>    ciphers_suit = context.get_ciphers()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ciphers_suit)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>: <span class="hljs-subst">&#123;ciphers_suit[i][<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)<br><br>    httpd = HTTPServer((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">4443</span>), MyRequestHandler)<br>    httpd.socket = context.wrap_socket(httpd.socket, server_side=<span class="hljs-literal">True</span>)<br>    httpd.serve_forever()<br></code></pre></td></tr></table></figure><p>修改上述代码中的ciphers可以调整服务器支持的加密类型。</p><h2 id="3-运行服务器"><a href="#3-运行服务器" class="headerlink" title="3 运行服务器"></a>3 运行服务器</h2><p>通过以下命令执行脚本，运行服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 https_server.py<br></code></pre></td></tr></table></figure><h2 id="4-访问服务器"><a href="#4-访问服务器" class="headerlink" title="4 访问服务器"></a>4 访问服务器</h2><p>可以在局域网内通过火狐浏览器访问以下网址，查看https服务器是否已经生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://10.98.69.174:4443<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>脚本程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>看两遍就会的Hexo静态博客网站搭建教程</title>
    <link href="/2025/03/12/node-hexo-build-blog/"/>
    <url>/2025/03/12/node-hexo-build-blog/</url>
    
    <content type="html"><![CDATA[<p>要求：作者能够专注于博客内容的写作，简化博客网站的搭建和更新过程。</p><p>对本文用到的技术说明如下：</p><ul><li>Node：一个JavaScript的运行环境，其中npm是Node.js的默认包管理器</li><li>Hexo：一个快速、简洁且高效的博客框架，可以使用npm安装Hexo</li></ul><h2 id="1-安装Node"><a href="#1-安装Node" class="headerlink" title="1 安装Node"></a>1 安装Node</h2><p>1、Node下载链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://nodejs.org/zh-cn/download/<br></code></pre></td></tr></table></figure><p>2、测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2 安装Hexo"></a>2 安装Hexo</h2><p>1、使用npm安装hexo-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>参数 -g 是global的缩写，这样任何目录下都能直接调用后续的hexo命令</p><p>2、初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init blog<br>cd blog<br></code></pre></td></tr></table></figure><p>3、安装组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br></code></pre></td></tr></table></figure><p>4、创建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;My_Post&quot;<br></code></pre></td></tr></table></figure><p>在<code>source/_posts</code>文件夹中会出现一个名为<code>My_Post.md</code>的文件，编辑该文件并保存</p><p>5、生成网页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><p>6、本地预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><p>本地浏览器访问：<a href="http://localhost:4000/">http://localhost:4000</a></p><p>生成的网页文件将保存在<code>public</code>文件夹中，你可以将该文件夹复制到你想要部署的网站服务器上实现在线访问。</p><h2 id="3-部署博客到GitHub"><a href="#3-部署博客到GitHub" class="headerlink" title="3 部署博客到GitHub"></a>3 部署博客到GitHub</h2><h3 id="3-1-申请仓库"><a href="#3-1-申请仓库" class="headerlink" title="3.1 申请仓库"></a>3.1 申请仓库</h3><p>1、登录GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/<br></code></pre></td></tr></table></figure><p>2、新建仓库</p><p>在GitHub中选择Create a new repository</p><p>仓库名为：&lt;用户名&gt;.github.io，例如：lishan666.github.io</p><p>仓库类型选择Public，并勾选Add a README file选项框</p><p>3、博客地址</p><p>启用的博客地址为：https:&#x2F;&#x2F;&lt;用户名&gt;.github.io</p><p>例如：<a href="https://lishan666.github.io/">https://lishan666.github.io</a></p><h3 id="3-2-安装Git"><a href="#3-2-安装Git" class="headerlink" title="3.2 安装Git"></a>3.2 安装Git</h3><p>1、Git下载链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://git-scm.com/downloads/<br></code></pre></td></tr></table></figure><p>2、设置Git参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;your name&quot;<br>git config --global user.email &quot;your email&quot;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Shan Li&quot;<br>git config --global user.email &quot;shan.li@bit01.top&quot;<br></code></pre></td></tr></table></figure><p>3、生成本地ssh秘钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;your email&quot;<br></code></pre></td></tr></table></figure><p>参数 -t 表示创建类型，RSA算法是一种常用的非对称加密算法</p><p>参数 -C 表示注释，为方便辨识，可将自己的邮箱作为注释信息，但不用邮箱也可以</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;shan.li@bit01.top&quot;<br></code></pre></td></tr></table></figure><p>输入以上命令后，按下3次Enter键即可成功创建本地公钥id_rsa.pub、本地私钥id_rsa</p><p>打开id_rsa.pub文件，复制本地公钥内容</p><p>4、GitHub添加本地ssh公钥</p><p>（1）登录GitHub，进入 Settings 页面</p><p>（2）选择 SSH and GPG keys，点击 New SSH key</p><p>（3）粘贴复制的id_rsa.pub内容，点击Add SSH key</p><p>5、本地添加GitHub公钥</p><p>在本地连接GitHub服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>根据提示输入yes，将服务器的公钥保存到本地</p><h3 id="3-3-发布文章"><a href="#3-3-发布文章" class="headerlink" title="3.3 发布文章"></a>3.3 发布文章</h3><p>1、安装hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>2、修改 _config.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repository: git@github.com:&lt;用户名&gt;/&lt;用户名&gt;.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repository: git@github.com:lishan666/lishan666.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>3、更新页面并预览</p><p>新建文件后，使用以下命令更新网页，并在本地预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><p>5、发布本地文章到GitHub</p><p>本地预览无误后，使用以下命令发布文章到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure><p>也可以不在本地预览，直接更新并发布到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure><h3 id="3-4-在线访问"><a href="#3-4-在线访问" class="headerlink" title="3.4 在线访问"></a>3.4 在线访问</h3><p>现在可以通过浏览器访问：https:&#x2F;&#x2F;&lt;用户名&gt;.github.io访问博客。</p><p>例如：<a href="https://lishan666.github.io/">https://lishan666.github.io</a></p><h2 id="4-部署博客到Gitee"><a href="#4-部署博客到Gitee" class="headerlink" title="4 部署博客到Gitee"></a>4 部署博客到Gitee</h2><p>GitHub在国内的访问速度比较慢，甚至可能无法访问，此时可以选择部署到Gitee上，方法和部署到GitHub上类似。</p><h2 id="5-部署博客到云服务器"><a href="#5-部署博客到云服务器" class="headerlink" title="5 部署博客到云服务器"></a>5 部署博客到云服务器</h2><p>部署博客到GitHub或Gitee服务器上是完全免费的，且操作相对比较简单，但是你的博客访问地址会很长，且没有个性。此时，部署博客到云服务器也是一种选择。一种推荐的步骤如下：</p><p>（1）购买一台云服务器，假设分配给该服务器的公网ip为 1.2.3.4，注意开放80、443等安全组端口</p><p>（2）购买一个域名，假设该域名为 bit01.top，解析域名到服务器ip地址</p><p>（3）配置ssh密钥，最终达到本地pc与云服务器之间可以通过ssh免密连接的效果</p><p>（4）在云服务器上安装宝塔面板，在面板管理界面中安装Nginx应用，并设置网站的目录，假设目录为&#x2F;www&#x2F;hexo</p><p>（5）在云服务上初始化一个git仓库文件，假设该文件所在位置为&#x2F;root&#x2F;repo&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init --bare hexo.git<br></code></pre></td></tr></table></figure><p>（6）在git仓库的hooks目录下创建post-receive文件，设置work-tree和git-dir参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>git --work-tree=/www/hexo --git-dir=/root/repo/hexo.git checkout -f<br></code></pre></td></tr></table></figure><p>（7）在本地pc的hexo项目中，修改_config.yml中的deploy属性，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>    type: git<br>    repository: root@1.2.3.4:/root/repo/hexo.git<br>    branch: master<br></code></pre></td></tr></table></figure><p>特别注意，上述步骤使用了root用户进行操作，基于安全考虑，可以使用普通用户进行操作，但要注意权限问题。</p><p>一切就绪后，就可以通过直接访问云服务器的公网ip地址，或访问该云服务器绑定的对应域名在线查看你的网站。</p><h2 id="6-完结"><a href="#6-完结" class="headerlink" title="6 完结"></a>6 完结</h2><p>博客网站搭建之后，作者后续只需要在<code>souce/_posts</code>文件夹下新建md文件，然后在文件中创作内容即可</p><p>新建博客文章时也可以执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;new blog&quot;<br></code></pre></td></tr></table></figure><p>更新网站时只需要执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网站设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
