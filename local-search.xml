<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>嵌入式学习指南参考</title>
    <link href="/2025/03/15/embedded-learning-reference/"/>
    <url>/2025/03/15/embedded-learning-reference/</url>
    
    <content type="html"><![CDATA[<h2 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h2><p>    1.1 C语言（数据类型、关键字、注释、操作语句、基本语法、数组、函数、一级指针、结构体、枚举体）<br>    1.2 基本电路知识（认识电阻、电容、电感、二极管、三极管、继电器等基本元器件以及在电路图中的表示）<br>    1.3 单片机开发知识（GPIO、LED、串口、中断、AD&#x2F;DA、时钟、LCD显示器、存储器等）<br>    1.4 掌握Keil等工具的使用，会使用一款8位单片机（常用STC89C52）进行简单的裸机开发（无操作系统）</p><h2 id="2-初阶"><a href="#2-初阶" class="headerlink" title="2 初阶"></a>2 初阶</h2><p>    2.1 C语言（链表、内存操作、递归函数、共用体、文件操作等）<br>    2.2 数字电路、模拟电路，这两门了解即可，不用深入，主要是为了能看懂简单的芯片数据手册datasheet<br>    2.3 单片机开发知识（电机、红外、Wi-Fi、蓝牙、以太网、HDMI、USB、DMA等）<br>    2.4 会使用一款32位单片机（常用STM32F103）进行简单的裸机开发（无操作系统）<br>    2.5 学会Linux操作系统的使用（例如：Ubuntu操作系统）<br>    2.6 掌握git、gcc、gdb、make等开发工具的使用    </p><h2 id="3-进阶"><a href="#3-进阶" class="headerlink" title="3 进阶"></a>3 进阶</h2><p>    3.1 C语言（头文件、预处理、条件编译、位域、可变参数函数、命令行参数函数、排序算法、查找算法等等）<br>    3.2 数据结构与算法<br>    3.3 单片机开发知识（IIC总线、SPI总线、CAN总线、OneWire总线等）<br>    3.4 操作系统原理、数据库相关知识<br>    3.5 学会RTOS操作系统系统下的嵌入式开发（例如：FreeRTOS）<br>    3.6 会使用Vscode、SourceInsight等代码阅读工具</p><h2 id="4-高阶"><a href="#4-高阶" class="headerlink" title="4 高阶"></a>4 高阶</h2><p>    4.1 学习Linux操作系统下的嵌入式开发<br>    4.2 学会使用汇编&#x2F;C++&#x2F;Python&#x2F;java等其它语言<br>    4.3 学习网络通信协议，例如TCP&#x2F;IP&#x2F;HTTP&#x2F;MQTT等<br>    4.4 学习图形界面程序的开发，例如PC端的Qt、C#、MFC等，手机端的Android、ios等应用开发<br>    4.5 根据岗位要求再深入学习相关知识，例如FPGA、DSP、视频编解码、图像处理等等    </p><p>推荐学习资料，仅供参考：<br>1、哔哩哔哩，直接搜索嵌入开发，寻找相关视频<br>2、正点原子：<a href="http://www.alientek.com/">http://www.alientek.com/</a><br>3、野火：<a href="https://embedfire.com/">https://embedfire.com/</a><br>4、韦东山：<a href="https://www.100ask.net/">https://www.100ask.net/</a><br>5、朱友鹏：<a href="https://t.elecfans.com/topic/133.html">https://t.elecfans.com/topic/133.html</a><br>5、华清远见：<a href="http://www.hqyj.com/courses/embai.html">http://www.hqyj.com/courses/embai.html</a></p><p>以上内容，纯属个人意见，如有谬误，欢迎交流</p>]]></content>
    
    
    <categories>
      
      <category>经验之谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>嵌入式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c/c++开发时的一些实用VsCode插件</title>
    <link href="/2025/03/15/vscode-plug/"/>
    <url>/2025/03/15/vscode-plug/</url>
    
    <content type="html"><![CDATA[<p>要求：为了提高使用vscode开发的效率，推荐几款实用插件。</p><p>Name: <strong>Align Spaces</strong><br>Description: Align operators without modifying the code（在不修改代码的情况下对齐操作符）</p><p>Name: <strong>Better Comments</strong><br>Description: Improve your code commenting by annotating with alert, informational, TODOs, and more!（通过添加alert、informational、todo等注释来改进代码注释!）</p><p>Name: <strong>C&#x2F;C++</strong><br>Description: C&#x2F;C++ IntelliSense, debugging, and code browsing.</p><p>Name: <strong>C&#x2F;C++ Extension Pack</strong><br>Description: Popular extensions for C++ development in Visual Studio Code.</p><p>Name: <strong>C&#x2F;C++ MATH Formula Viewer</strong><br>Description: hovers math formula of c mathematical library functions</p><p>Name: <strong>C&#x2F;C++ Themes</strong><br>Description: UI Themes for C&#x2F;C++ extension.</p><p>Name: <strong>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</strong><br>Description: Language pack extension for Chinese (Simplified)</p><p>Name: <strong>Code Runner</strong><br>Description: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, </p><p>Name: <strong>CodeSnap</strong><br>Description: 📷 Take beautiful screenshots of your code</p><p>Name: <strong>Comment Translate</strong><br>Description: This plugin uses the Google Translate API to translate comments for the VSCode programming language.</p><p>Name: <strong>Community Material Theme</strong><br>Description: The official community maintained Material Theme with ‘legacy’ color schemes you love!</p><p>Name: <strong>Error Lens</strong><br>Description: Improve highlighting of errors, warnings and other language diagnostics.</p><p>Name: <strong>Git Graph</strong><br>Description: View a Git Graph of your repository, and perform Git actions from the graph.</p><p>Name: <strong>Indenticator</strong><br>Description: Highlights your current indent depth（突出显示当前缩进深度）</p><p>Name: <strong>Material Theme Icons</strong><br>Description: Material Theme Icons, the most epic icons theme for Visual Studio Code and Material Theme.</p><p>Name: <strong>Trailing Spaces</strong><br>Description: Highlight trailing spaces and delete them in a flash!（突出显示拖尾空格，并在flash中删除它们!）</p><p>Name: <strong>Material Theme</strong><br>Description: The most epic theme now for Visual Studio Code</p><p>Name: <strong>VS Code Counter</strong><br>Description: Count lines of code in many programming languages.（计算许多编程语言中的代码行数）</p><p>Name: <strong>clangd</strong><br>Description: C&#x2F;C++ completion, navigation, and insights<img src="/"></p>]]></content>
    
    
    <categories>
      
      <category>开发技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 编程构造并发送802.11 wifi mac帧</title>
    <link href="/2025/03/15/python-wifi-mac-frame/"/>
    <url>/2025/03/15/python-wifi-mac-frame/</url>
    
    <content type="html"><![CDATA[<p>要求：为了通过python编程发送mac帧测试wifi模块是否正常工作，特编写此程序</p><p>前提：需要有一个支持监控模式的网卡，并在Linux操作系统下运行该程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># note: precondition:</span><br><span class="hljs-comment"># sudo apt-get upgrade -y &amp;&amp; apt-get update -y</span><br><span class="hljs-comment"># sudo apt-get install python3-pip aircrack-ng -y</span><br><span class="hljs-comment"># pip install scapy</span><br><span class="hljs-comment"># 1. Verify that the network card supporting monitor mode: iwconfig</span><br><span class="hljs-comment"># 2. nable monitor mode of wlan0: airmon-ng start wlan0</span><br><span class="hljs-comment"># 3. Set the channel of wlan0mon: iwconfig wlan0mon channel &lt;channel_number&gt;</span><br><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>wifi_mac_frame = RadioTap() / Dot11() / Raw()  <span class="hljs-comment"># blank wifi mac frame</span><br><br><span class="hljs-comment"># frame header</span><br>wifi_mac_frame.<span class="hljs-built_in">type</span> = <span class="hljs-number">0</span>  <span class="hljs-comment"># management</span><br>wifi_mac_frame.subtype = <span class="hljs-number">13</span>  <span class="hljs-comment"># action</span><br>wifi_mac_frame.proto = <span class="hljs-number">0</span>  <span class="hljs-comment"># protect</span><br>wifi_mac_frame.FCfield = <span class="hljs-string">&quot;retry&quot;</span> <span class="hljs-comment"># retry</span><br>wifi_mac_frame.ID = <span class="hljs-number">14849</span>  <span class="hljs-comment"># duration</span><br>wifi_mac_frame.addr1 = <span class="hljs-string">&quot;FF:FF:FF:FF:FF:FF&quot;</span>  <span class="hljs-comment"># broadcast address</span><br>wifi_mac_frame.addr2 = <span class="hljs-string">&quot;02:3B:42:E1:FC:55&quot;</span>  <span class="hljs-comment"># source address</span><br>wifi_mac_frame.addr3 = <span class="hljs-string">&quot;02:3B:42:E1:FC:55&quot;</span>  <span class="hljs-comment"># bssid</span><br>wifi_mac_frame.SC = <span class="hljs-number">48</span>  <span class="hljs-comment"># sequence number</span><br><br><span class="hljs-comment"># frame body</span><br>hex_value = <span class="hljs-string">&#x27;042243000290fad602000000640043ef3d3d&#x27;</span>  <span class="hljs-comment"># FILS Discover Frame</span><br>wifi_mac_frame.load = <span class="hljs-built_in">bytes</span>.fromhex(hex_value)  <span class="hljs-comment"># payload</span><br><br>wifi_mac_frame.show()  <span class="hljs-comment"># show frame</span><br><br>sendp(wifi_mac_frame, iface=<span class="hljs-string">&quot;wlan0mon&quot;</span>, count=<span class="hljs-number">10000</span>)  <span class="hljs-comment"># send 10000 times</span><br><br></code></pre></td></tr></table></figure><p>使用说明：</p><p>1、需要将代码中的addr1和addr2替换成目标AP热点的mac地址 </p><p>2、修改type和subtype的值可以构造不同类型的帧</p><p>3、sendp函数中的count参数表示发送帧的次数</p><p>特别注意：本程序只用于学习，不可用于违法目的，亦不可攻击他人正常工作的AP热点</p>]]></content>
    
    
    <categories>
      
      <category>脚本程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt基本操作介绍</title>
    <link href="/2025/03/14/openwrt-basic-operation/"/>
    <url>/2025/03/14/openwrt-basic-operation/</url>
    
    <content type="html"><![CDATA[<p>要求：下载openwrt源码，编译，打包固件。</p><h2 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1 下载源码"></a>1 下载源码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/openwrt/openwrt.git<br>cd openwrt<br></code></pre></td></tr></table></figure><h2 id="2-更新feeds"><a href="#2-更新feeds" class="headerlink" title="2 更新feeds"></a>2 更新feeds</h2><p>首次编译前，需要更新feeds，否则编译时会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./scripts/feeds update -a         // 更新feeds包<br>./scripts/feeds install -a        // 安装feeds包进入OpenWrt系统中<br></code></pre></td></tr></table></figure><h2 id="3-配置openwrt"><a href="#3-配置openwrt" class="headerlink" title="3 配置openwrt"></a>3 配置openwrt</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make menuconfig<br></code></pre></td></tr></table></figure><h2 id="4-编译固件"><a href="#4-编译固件" class="headerlink" title="4 编译固件"></a>4 编译固件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make V=s                      // 开始编译固件<br></code></pre></td></tr></table></figure><h2 id="5-打包固件"><a href="#5-打包固件" class="headerlink" title="5 打包固件"></a>5 打包固件</h2><p>编译完成后，在<code>bin/targets/</code>目录下可以看到生成的固件。</p><p>通过上述步骤，你可以成功地在本地环境中构建自己的OpenWrt固件。</p>]]></content>
    
    
    <categories>
      
      <category>OpenWrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用python搭建https服务器</title>
    <link href="/2025/03/13/python-https-server/"/>
    <url>/2025/03/13/python-https-server/</url>
    
    <content type="html"><![CDATA[<p>要求：在一台连接到网络的主机上搭建https服务器，假设该主机的ip地址为：10.98.69.174。</p><h2 id="1-创建证书"><a href="#1-创建证书" class="headerlink" title="1 创建证书"></a>1 创建证书</h2><p>创建证书example.crt和私钥example.key，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -newkey rsa:2048 -nodes -keyout example.key -x509 -days 365 -out example.crt<br></code></pre></td></tr></table></figure><p>使用命令可以查看证书详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl x509 -in example.crt -text -noout<br></code></pre></td></tr></table></figure><h2 id="2-创建服务器脚本"><a href="#2-创建服务器脚本" class="headerlink" title="2 创建服务器脚本"></a>2 创建服务器脚本</h2><p>使用python编辑脚本文件https_server.py，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> ssl<br><span class="hljs-keyword">from</span> http.server <span class="hljs-keyword">import</span> HTTPServer, BaseHTTPRequestHandler<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRequestHandler</span>(<span class="hljs-title class_ inherited__">BaseHTTPRequestHandler</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">do_GET</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># self.log_message(&#x27;%s&#x27;, &quot;do_GET&quot;)</span><br>        self.send_response(<span class="hljs-number">200</span>)<br>        self.send_header(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>)<br>        self.end_headers()<br>        self.wfile.write(<span class="hljs-built_in">bytes</span>(json.dumps(&#123;<span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>&#125;), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)<br>    context.load_cert_chain(certfile=<span class="hljs-string">&#x27;./example.crt&#x27;</span>, keyfile=<span class="hljs-string">&quot;./example.key&quot;</span>)<br><br>    ciphers = <span class="hljs-string">&quot;&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-ECDSA-AES128-GCM-SHA256:&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-ECDSA-CHACHA20-POLY1305:&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-RSA-CHACHA20-POLY1305:&quot;</span><br>    ciphers += <span class="hljs-string">&quot;ECDHE-RSA-AES128-GCM-SHA256:&quot;</span><br>    context.set_ciphers(ciphers)<br><br>    ciphers_suit = context.get_ciphers()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ciphers_suit)):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;i&#125;</span>: <span class="hljs-subst">&#123;ciphers_suit[i][<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>&quot;</span>)<br><br>    httpd = HTTPServer((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">4443</span>), MyRequestHandler)<br>    httpd.socket = context.wrap_socket(httpd.socket, server_side=<span class="hljs-literal">True</span>)<br>    httpd.serve_forever()<br></code></pre></td></tr></table></figure><h2 id="3-运行服务器"><a href="#3-运行服务器" class="headerlink" title="3 运行服务器"></a>3 运行服务器</h2><p>通过以下命令执行脚本，运行服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python3 https_server.py<br></code></pre></td></tr></table></figure><h2 id="4-访问服务器"><a href="#4-访问服务器" class="headerlink" title="4 访问服务器"></a>4 访问服务器</h2><p>可以在局域网内通过火狐浏览器访问以下网址，查看https服务器是否已经生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://10.98.69.174:4443<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网站设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Node和Hexo搭建静态博客网站</title>
    <link href="/2025/03/12/node-hexo-build-blog/"/>
    <url>/2025/03/12/node-hexo-build-blog/</url>
    
    <content type="html"><![CDATA[<p>要求：作者能够专注于博客内容的写作，简化博客网站的搭建和更新过程。</p><p>对本文用到的技术说明如下：</p><ul><li>Node：一个JavaScript的运行环境，其中npm是Node.js的默认包管理器</li><li>Hexo：一个快速、简洁且高效的博客框架，可以使用npm安装Hexo</li></ul><h2 id="1-安装Node"><a href="#1-安装Node" class="headerlink" title="1 安装Node"></a>1 安装Node</h2><p>1、Node下载链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://nodejs.org/zh-cn/download/<br></code></pre></td></tr></table></figure><p>2、测试是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h2 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2 安装Hexo"></a>2 安装Hexo</h2><p>1、使用npm安装hexo-cli</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>参数 -g 是global的缩写，这样任何目录下都能直接调用后续的hexo命令</p><p>2、初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init blog<br>cd blog<br></code></pre></td></tr></table></figure><p>3、安装组件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br></code></pre></td></tr></table></figure><p>4、创建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;My_Post&quot;<br></code></pre></td></tr></table></figure><p>在<code>source/_posts</code>文件夹中会出现一个名为<code>My_Post.md</code>的文件，编辑该文件并保存</p><p>5、生成网页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo g<br></code></pre></td></tr></table></figure><p>6、本地预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo s<br></code></pre></td></tr></table></figure><p>本地浏览器访问：<a href="http://localhost:4000/">http://localhost:4000</a></p><p>生成的网页文件将保存在<code>public</code>文件夹中，你可以将该文件夹复制到你想要部署的网站服务器上实现在线访问。</p><h2 id="3-部署博客到GitHub"><a href="#3-部署博客到GitHub" class="headerlink" title="3 部署博客到GitHub"></a>3 部署博客到GitHub</h2><h3 id="3-1-申请仓库"><a href="#3-1-申请仓库" class="headerlink" title="3.1 申请仓库"></a>3.1 申请仓库</h3><p>1、登录GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://github.com/<br></code></pre></td></tr></table></figure><p>2、新建仓库</p><p>在GitHub中选择Create a new repository</p><p>仓库名为：&lt;用户名&gt;.github.io，例如：lishan666.github.io</p><p>仓库类型选择Public，并勾选Add a README file选项框</p><p>3、博客地址</p><p>启用的博客地址为：https:&#x2F;&#x2F;&lt;用户名&gt;.github.io</p><p>例如：<a href="https://lishan666.github.io/">https://lishan666.github.io</a></p><h3 id="3-2-安装Git"><a href="#3-2-安装Git" class="headerlink" title="3.2 安装Git"></a>3.2 安装Git</h3><p>1、Git下载链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://git-scm.com/downloads/<br></code></pre></td></tr></table></figure><p>2、设置Git参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;your name&quot;<br>git config --global user.email &quot;your email&quot;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;Shan Li&quot;<br>git config --global user.email &quot;shan.li@bit01.top&quot;<br></code></pre></td></tr></table></figure><p>3、生成本地ssh秘钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;your email&quot;<br></code></pre></td></tr></table></figure><p>参数 -t 表示创建类型，RSA算法是一种常用的非对称加密算法</p><p>参数 -C 表示注释，为方便辨识，可将自己的邮箱作为注释信息，但不用邮箱也可以</p><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;shan.li@bit01.top&quot;<br></code></pre></td></tr></table></figure><p>输入以上命令后，按下3次Enter键即可成功创建本地公钥id_rsa.pub、本地私钥id_rsa</p><p>打开id_rsa.pub文件，复制本地公钥内容</p><p>4、GitHub添加本地ssh公钥</p><p>（1）登录GitHub，进入 Settings 页面</p><p>（2）选择 SSH and GPG keys，点击 New SSH key</p><p>（3）粘贴复制的id_rsa.pub内容，点击Add SSH key</p><p>5、本地添加GitHub公钥</p><p>在本地连接GitHub服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>根据提示输入yes，将服务器的公钥保存到本地</p><h3 id="3-3-发布文章"><a href="#3-3-发布文章" class="headerlink" title="3.3 发布文章"></a>3.3 发布文章</h3><p>1、安装hexo-deployer-git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>2、修改 _config.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repository: git@github.com:&lt;用户名&gt;/&lt;用户名&gt;.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repository: git@github.com:lishan666/lishan666.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>3、更新页面并预览</p><p>新建文件后，使用以下命令更新网页，并在本地预览</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s<br></code></pre></td></tr></table></figure><p>5、发布本地文章到GitHub</p><p>本地预览无误后，使用以下命令发布文章到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure><p>也可以不在本地预览，直接更新并发布到GitHub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure><h3 id="3-4-在线访问"><a href="#3-4-在线访问" class="headerlink" title="3.4 在线访问"></a>3.4 在线访问</h3><p>现在可以通过浏览器访问：https:&#x2F;&#x2F;&lt;用户名&gt;.github.io访问博客。</p><p>例如：<a href="https://lishan666.github.io/">https://lishan666.github.io</a></p><h2 id="4-部署博客到Gitee"><a href="#4-部署博客到Gitee" class="headerlink" title="4 部署博客到Gitee"></a>4 部署博客到Gitee</h2><p>GitHub在国内的访问速度比较慢，甚至可能无法访问，此时可以选择部署到Gitee上，方法和部署到GitHub上类似。</p><h2 id="5-部署博客到云服务器"><a href="#5-部署博客到云服务器" class="headerlink" title="5 部署博客到云服务器"></a>5 部署博客到云服务器</h2><p>部署博客到GitHub或Gitee服务器上是完全免费的，且操作相对比较简单，但是你的博客访问地址会很长，且没有个性。此时，部署博客到云服务器也是一种选择。一种推荐的步骤如下：</p><p>（1）购买一台云服务器，假设分配给该服务器的公网ip为 1.2.3.4，注意开放80、443等安全组端口</p><p>（2）购买一个域名，假设该域名为 bit01.top，解析域名到服务器ip地址</p><p>（3）配置ssh密钥，最终达到本地pc与云服务器之间可以通过ssh免密连接的效果</p><p>（4）在云服务器上安装宝塔面板，在面板管理界面中安装Nginx应用，并设置网站的目录，假设目录为&#x2F;www&#x2F;hexo</p><p>（5）在云服务上初始化一个git仓库文件，假设该文件所在位置为&#x2F;root&#x2F;repo&#x2F;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init --bare hexo.git<br></code></pre></td></tr></table></figure><p>（6）在git仓库的hooks目录下创建post-receive文件，设置work-tree和git-dir参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>git --work-tree=/www/hexo --git-dir=/root/repo/hexo.git checkout -f<br></code></pre></td></tr></table></figure><p>（7）在本地pc的hexo项目中，修改_config.yml中的deploy属性，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">deploy:<br>    type: git<br>    repository: root@1.2.3.4:/root/repo/hexo.git<br>    branch: master<br></code></pre></td></tr></table></figure><p>特别注意，上述步骤使用了root用户进行操作，基于安全考虑，可以使用普通用户进行操作，但要注意权限问题。</p><p>一切就绪后，就可以通过直接访问云服务器的公网ip地址，或访问该云服务器绑定的对应域名在线查看你的网站。</p><h2 id="6-完结"><a href="#6-完结" class="headerlink" title="6 完结"></a>6 完结</h2><p>博客网站搭建之后，作者后续只需要在<code>souce/_posts</code>文件夹下新建md文件，然后在文件中创作内容即可</p><p>新建博客文章时也可以执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new &quot;new blog&quot;<br></code></pre></td></tr></table></figure><p>更新网站时只需要执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo cl &amp;&amp; hexo g -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>网站设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术文章</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
